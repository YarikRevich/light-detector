
task4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800676c  0800676c  0001676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067ec  080067ec  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067f4  080067f4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067f4  080067f4  000167f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067f8  080067f8  000167f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080067fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000068  08006864  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006864  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016dac  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000334f  00000000  00000000  00036e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  0003a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd2  00000000  00000000  0003b638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028fbd  00000000  00000000  0003c60a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000199c8  00000000  00000000  000655c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f784d  00000000  00000000  0007ef8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005aa4  00000000  00000000  001767dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017c280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006754 	.word	0x08006754

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08006754 	.word	0x08006754

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ca:	4b10      	ldr	r3, [pc, #64]	; (800050c <MX_DMA_Init+0x48>)
 80004cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004ce:	4a0f      	ldr	r2, [pc, #60]	; (800050c <MX_DMA_Init+0x48>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6493      	str	r3, [r2, #72]	; 0x48
 80004d6:	4b0d      	ldr	r3, [pc, #52]	; (800050c <MX_DMA_Init+0x48>)
 80004d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	2010      	movs	r0, #16
 80004e8:	f000 fe8d 	bl	8001206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004ec:	2010      	movs	r0, #16
 80004ee:	f000 fea6 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	2011      	movs	r0, #17
 80004f8:	f000 fe85 	bl	8001206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80004fc:	2011      	movs	r0, #17
 80004fe:	f000 fe9e 	bl	800123e <HAL_NVIC_EnableIRQ>

}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000

08000510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	4b25      	ldr	r3, [pc, #148]	; (80005bc <MX_GPIO_Init+0xac>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	4a24      	ldr	r2, [pc, #144]	; (80005bc <MX_GPIO_Init+0xac>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000532:	4b22      	ldr	r3, [pc, #136]	; (80005bc <MX_GPIO_Init+0xac>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053e:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <MX_GPIO_Init+0xac>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a1e      	ldr	r2, [pc, #120]	; (80005bc <MX_GPIO_Init+0xac>)
 8000544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <MX_GPIO_Init+0xac>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b19      	ldr	r3, [pc, #100]	; (80005bc <MX_GPIO_Init+0xac>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a18      	ldr	r2, [pc, #96]	; (80005bc <MX_GPIO_Init+0xac>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b16      	ldr	r3, [pc, #88]	; (80005bc <MX_GPIO_Init+0xac>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <MX_GPIO_Init+0xac>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <MX_GPIO_Init+0xac>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <MX_GPIO_Init+0xac>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800058a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800058c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4808      	ldr	r0, [pc, #32]	; (80005c0 <MX_GPIO_Init+0xb0>)
 800059e:	f001 f85d 	bl	800165c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2028      	movs	r0, #40	; 0x28
 80005a8:	f000 fe2d 	bl	8001206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005ac:	2028      	movs	r0, #40	; 0x28
 80005ae:	f000 fe46 	bl	800123e <HAL_NVIC_EnableIRQ>

}
 80005b2:	bf00      	nop
 80005b4:	3728      	adds	r7, #40	; 0x28
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000
 80005c0:	48000800 	.word	0x48000800

080005c4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <MX_I2C1_Init+0x74>)
 80005ca:	4a1c      	ldr	r2, [pc, #112]	; (800063c <MX_I2C1_Init+0x78>)
 80005cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <MX_I2C1_Init+0x74>)
 80005d0:	f640 6214 	movw	r2, #3604	; 0xe14
 80005d4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_I2C1_Init+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_I2C1_Init+0x74>)
 80005de:	2201      	movs	r2, #1
 80005e0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_I2C1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_I2C1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f4:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_I2C1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <MX_I2C1_Init+0x74>)
 8000602:	f001 fa07 	bl	8001a14 <HAL_I2C_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800060c:	f000 f967 	bl	80008de <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000610:	2100      	movs	r1, #0
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <MX_I2C1_Init+0x74>)
 8000614:	f002 fd06 	bl	8003024 <HAL_I2CEx_ConfigAnalogFilter>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800061e:	f000 f95e 	bl	80008de <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000622:	2100      	movs	r1, #0
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_I2C1_Init+0x74>)
 8000626:	f002 fd48 	bl	80030ba <HAL_I2CEx_ConfigDigitalFilter>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000630:	f000 f955 	bl	80008de <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000084 	.word	0x20000084
 800063c:	40005400 	.word	0x40005400

08000640 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b0ac      	sub	sp, #176	; 0xb0
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2288      	movs	r2, #136	; 0x88
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f005 fce9 	bl	8006038 <memset>
  if(i2cHandle->Instance==I2C1)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a53      	ldr	r2, [pc, #332]	; (80007b8 <HAL_I2C_MspInit+0x178>)
 800066c:	4293      	cmp	r3, r2
 800066e:	f040 809e 	bne.w	80007ae <HAL_I2C_MspInit+0x16e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000672:	2340      	movs	r3, #64	; 0x40
 8000674:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000676:	2300      	movs	r3, #0
 8000678:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fbcc 	bl	8003e1c <HAL_RCCEx_PeriphCLKConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800068a:	f000 f928 	bl	80008de <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b4b      	ldr	r3, [pc, #300]	; (80007bc <HAL_I2C_MspInit+0x17c>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a4a      	ldr	r2, [pc, #296]	; (80007bc <HAL_I2C_MspInit+0x17c>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b48      	ldr	r3, [pc, #288]	; (80007bc <HAL_I2C_MspInit+0x17c>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ae:	2312      	movs	r3, #18
 80006b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ba:	2303      	movs	r3, #3
 80006bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006c0:	2304      	movs	r3, #4
 80006c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006ca:	4619      	mov	r1, r3
 80006cc:	483c      	ldr	r0, [pc, #240]	; (80007c0 <HAL_I2C_MspInit+0x180>)
 80006ce:	f000 ffc5 	bl	800165c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006d2:	4b3a      	ldr	r3, [pc, #232]	; (80007bc <HAL_I2C_MspInit+0x17c>)
 80006d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d6:	4a39      	ldr	r2, [pc, #228]	; (80007bc <HAL_I2C_MspInit+0x17c>)
 80006d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006dc:	6593      	str	r3, [r2, #88]	; 0x58
 80006de:	4b37      	ldr	r3, [pc, #220]	; (80007bc <HAL_I2C_MspInit+0x17c>)
 80006e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80006ea:	4b36      	ldr	r3, [pc, #216]	; (80007c4 <HAL_I2C_MspInit+0x184>)
 80006ec:	4a36      	ldr	r2, [pc, #216]	; (80007c8 <HAL_I2C_MspInit+0x188>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 80006f0:	4b34      	ldr	r3, [pc, #208]	; (80007c4 <HAL_I2C_MspInit+0x184>)
 80006f2:	2203      	movs	r2, #3
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <HAL_I2C_MspInit+0x184>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <HAL_I2C_MspInit+0x184>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <HAL_I2C_MspInit+0x184>)
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000708:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <HAL_I2C_MspInit+0x184>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800070e:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <HAL_I2C_MspInit+0x184>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000714:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <HAL_I2C_MspInit+0x184>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800071a:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <HAL_I2C_MspInit+0x184>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000720:	4828      	ldr	r0, [pc, #160]	; (80007c4 <HAL_I2C_MspInit+0x184>)
 8000722:	f000 fda7 	bl	8001274 <HAL_DMA_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 800072c:	f000 f8d7 	bl	80008de <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a24      	ldr	r2, [pc, #144]	; (80007c4 <HAL_I2C_MspInit+0x184>)
 8000734:	63da      	str	r2, [r3, #60]	; 0x3c
 8000736:	4a23      	ldr	r2, [pc, #140]	; (80007c4 <HAL_I2C_MspInit+0x184>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <HAL_I2C_MspInit+0x18c>)
 800073e:	4a24      	ldr	r2, [pc, #144]	; (80007d0 <HAL_I2C_MspInit+0x190>)
 8000740:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <HAL_I2C_MspInit+0x18c>)
 8000744:	2203      	movs	r2, #3
 8000746:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000748:	4b20      	ldr	r3, [pc, #128]	; (80007cc <HAL_I2C_MspInit+0x18c>)
 800074a:	2210      	movs	r2, #16
 800074c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <HAL_I2C_MspInit+0x18c>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <HAL_I2C_MspInit+0x18c>)
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <HAL_I2C_MspInit+0x18c>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <HAL_I2C_MspInit+0x18c>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <HAL_I2C_MspInit+0x18c>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <HAL_I2C_MspInit+0x18c>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000772:	4816      	ldr	r0, [pc, #88]	; (80007cc <HAL_I2C_MspInit+0x18c>)
 8000774:	f000 fd7e 	bl	8001274 <HAL_DMA_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_I2C_MspInit+0x142>
    {
      Error_Handler();
 800077e:	f000 f8ae 	bl	80008de <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a11      	ldr	r2, [pc, #68]	; (80007cc <HAL_I2C_MspInit+0x18c>)
 8000786:	639a      	str	r2, [r3, #56]	; 0x38
 8000788:	4a10      	ldr	r2, [pc, #64]	; (80007cc <HAL_I2C_MspInit+0x18c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	201f      	movs	r0, #31
 8000794:	f000 fd37 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000798:	201f      	movs	r0, #31
 800079a:	f000 fd50 	bl	800123e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2020      	movs	r0, #32
 80007a4:	f000 fd2f 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80007a8:	2020      	movs	r0, #32
 80007aa:	f000 fd48 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007ae:	bf00      	nop
 80007b0:	37b0      	adds	r7, #176	; 0xb0
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40005400 	.word	0x40005400
 80007bc:	40021000 	.word	0x40021000
 80007c0:	48000400 	.word	0x48000400
 80007c4:	200000d8 	.word	0x200000d8
 80007c8:	40020080 	.word	0x40020080
 80007cc:	20000120 	.word	0x20000120
 80007d0:	4002006c 	.word	0x4002006c

080007d4 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

char buffer[50];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    if (htim == &htim16) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d105      	bne.n	80007f0 <HAL_TIM_PeriodElapsedCallback+0x1c>
        HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 25);
 80007e4:	2319      	movs	r3, #25
 80007e6:	2232      	movs	r2, #50	; 0x32
 80007e8:	4904      	ldr	r1, [pc, #16]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80007ec:	f004 fa5a 	bl	8004ca4 <HAL_UART_Transmit>

//        uint8_t test[] = "tim 16 interrupt\r\n";

//        HAL_UART_Transmit(&huart2, test, sizeof(test), 25);
    }
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200001a0 	.word	0x200001a0
 80007fc:	20000168 	.word	0x20000168
 8000800:	200001ec 	.word	0x200001ec

08000804 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000814:	d105      	bne.n	8000822 <HAL_GPIO_EXTI_Callback+0x1e>
//	  HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 25);



	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000816:	2120      	movs	r1, #32
 8000818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081c:	f001 f8c8 	bl	80019b0 <HAL_GPIO_TogglePin>
  } else {
      __NOP();
  }
}
 8000820:	e000      	b.n	8000824 <HAL_GPIO_EXTI_Callback+0x20>
      __NOP();
 8000822:	bf00      	nop
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f000 fb99 	bl	8000f66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f80d 	bl	8000852 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f7ff fe6a 	bl	8000510 <MX_GPIO_Init>
  MX_DMA_Init();
 800083c:	f7ff fe42 	bl	80004c4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000840:	f7ff fec0 	bl	80005c4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000844:	f000 f9e6 	bl	8000c14 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000848:	f000 f996 	bl	8000b78 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

//    HAL_TIM_Base_Start_IT(&htim16);

    TSL2591X_Init();
 800084c:	f000 fb78 	bl	8000f40 <TSL2591X_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      while (1)
 8000850:	e7fe      	b.n	8000850 <main+0x24>

08000852 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b096      	sub	sp, #88	; 0x58
 8000856:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2244      	movs	r2, #68	; 0x44
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f005 fbe9 	bl	8006038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000866:	463b      	mov	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000874:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000878:	f002 fc7a 	bl	8003170 <HAL_PWREx_ControlVoltageScaling>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000882:	f000 f82c 	bl	80008de <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000886:	2310      	movs	r3, #16
 8000888:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800088a:	2301      	movs	r3, #1
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000892:	2360      	movs	r3, #96	; 0x60
 8000894:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000896:	2300      	movs	r3, #0
 8000898:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 fcbc 	bl	800321c <HAL_RCC_OscConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80008aa:	f000 f818 	bl	80008de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	230f      	movs	r3, #15
 80008b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008c2:	463b      	mov	r3, r7
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f003 f884 	bl	80039d4 <HAL_RCC_ClockConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008d2:	f000 f804 	bl	80008de <Error_Handler>
  }
}
 80008d6:	bf00      	nop
 80008d8:	3758      	adds	r7, #88	; 0x58
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e2:	b672      	cpsid	i
}
 80008e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <Error_Handler+0x8>

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <HAL_MspInit+0x44>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_MspInit+0x44>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6613      	str	r3, [r2, #96]	; 0x60
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_MspInit+0x44>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_MspInit+0x44>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_MspInit+0x44>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6593      	str	r3, [r2, #88]	; 0x58
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_MspInit+0x44>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097c:	f000 fb48 	bl	8001010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <DMA1_Channel6_IRQHandler+0x10>)
 800098a:	f000 fdaa 	bl	80014e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000120 	.word	0x20000120

08000998 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <DMA1_Channel7_IRQHandler+0x10>)
 800099e:	f000 fda0 	bl	80014e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000d8 	.word	0x200000d8

080009ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009b2:	f003 ff46 	bl	8004842 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200001a0 	.word	0x200001a0

080009c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <I2C1_EV_IRQHandler+0x10>)
 80009c6:	f001 faef 	bl	8001fa8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000084 	.word	0x20000084

080009d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <I2C1_ER_IRQHandler+0x10>)
 80009da:	f001 faff 	bl	8001fdc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000084 	.word	0x20000084

080009e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <USART2_IRQHandler+0x10>)
 80009ee:	f004 f9e3 	bl	8004db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200001ec 	.word	0x200001ec

080009fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a04:	f000 ffee 	bl	80019e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	e00a      	b.n	8000a34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a1e:	f3af 8000 	nop.w
 8000a22:	4601      	mov	r1, r0
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	b2ca      	uxtb	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbf0      	blt.n	8000a1e <_read+0x12>
  }

  return len;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	60f8      	str	r0, [r7, #12]
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e009      	b.n	8000a6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	60ba      	str	r2, [r7, #8]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	dbf1      	blt.n	8000a58 <_write+0x12>
  }
  return len;
 8000a74:	687b      	ldr	r3, [r7, #4]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <_close>:

int _close(int file)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa6:	605a      	str	r2, [r3, #4]
  return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <_isatty>:

int _isatty(int file)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f005 fa96 	bl	8006048 <__errno>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20018000 	.word	0x20018000
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	2000019c 	.word	0x2000019c
 8000b50:	200003c8 	.word	0x200003c8

08000b54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_TIM16_Init+0x48>)
 8000b7e:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <MX_TIM16_Init+0x4c>)
 8000b80:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9999;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_TIM16_Init+0x48>)
 8000b84:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b88:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <MX_TIM16_Init+0x48>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_TIM16_Init+0x48>)
 8000b92:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b96:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_TIM16_Init+0x48>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_TIM16_Init+0x48>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_TIM16_Init+0x48>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_TIM16_Init+0x48>)
 8000bac:	f003 fdf2 	bl	8004794 <HAL_TIM_Base_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000bb6:	f7ff fe92 	bl	80008de <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200001a0 	.word	0x200001a0
 8000bc4:	40014400 	.word	0x40014400

08000bc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <HAL_TIM_Base_MspInit+0x44>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d113      	bne.n	8000c02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_TIM_Base_MspInit+0x48>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bde:	4a0c      	ldr	r2, [pc, #48]	; (8000c10 <HAL_TIM_Base_MspInit+0x48>)
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	6613      	str	r3, [r2, #96]	; 0x60
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_TIM_Base_MspInit+0x48>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2019      	movs	r0, #25
 8000bf8:	f000 fb05 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bfc:	2019      	movs	r0, #25
 8000bfe:	f000 fb1e 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40014400 	.word	0x40014400
 8000c10:	40021000 	.word	0x40021000

08000c14 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c1a:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <MX_USART2_UART_Init+0x5c>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c58:	f003 ffd6 	bl	8004c08 <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c62:	f7ff fe3c 	bl	80008de <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200001ec 	.word	0x200001ec
 8000c70:	40004400 	.word	0x40004400

08000c74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0ac      	sub	sp, #176	; 0xb0
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2288      	movs	r2, #136	; 0x88
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f005 f9cf 	bl	8006038 <memset>
  if(uartHandle->Instance==USART2)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a25      	ldr	r2, [pc, #148]	; (8000d34 <HAL_UART_MspInit+0xc0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d143      	bne.n	8000d2c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f003 f8b3 	bl	8003e1c <HAL_RCCEx_PeriphCLKConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cbc:	f7ff fe0f 	bl	80008de <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <HAL_UART_MspInit+0xc4>)
 8000cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc4:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <HAL_UART_MspInit+0xc4>)
 8000cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cca:	6593      	str	r3, [r2, #88]	; 0x58
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <HAL_UART_MspInit+0xc4>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <HAL_UART_MspInit+0xc4>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cdc:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <HAL_UART_MspInit+0xc4>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_UART_MspInit+0xc4>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d18:	f000 fca0 	bl	800165c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2026      	movs	r0, #38	; 0x26
 8000d22:	f000 fa70 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d26:	2026      	movs	r0, #38	; 0x26
 8000d28:	f000 fa89 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	37b0      	adds	r7, #176	; 0xb0
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40004400 	.word	0x40004400
 8000d38:	40021000 	.word	0x40021000

08000d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d40:	f7ff ff08 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d46:	490d      	ldr	r1, [pc, #52]	; (8000d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <LoopForever+0xe>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d5c:	4c0a      	ldr	r4, [pc, #40]	; (8000d88 <LoopForever+0x16>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f005 f973 	bl	8006054 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d6e:	f7ff fd5d 	bl	800082c <main>

08000d72 <LoopForever>:

LoopForever:
    b LoopForever
 8000d72:	e7fe      	b.n	8000d72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d80:	080067fc 	.word	0x080067fc
  ldr r2, =_sbss
 8000d84:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d88:	200003c8 	.word	0x200003c8

08000d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC1_2_IRQHandler>
	...

08000d90 <I2C_WriteByte>:
#include "TSL2591.h"

uint8_t TSL2591_Gain, TSL2591_Time;

void I2C_WriteByte(uint8_t Cmd, uint8_t value)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	4603      	mov	r3, r0
 8000d98:	460a      	mov	r2, r1
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	71bb      	strb	r3, [r7, #6]
    uint8_t Buf[1] = {0};
 8000da0:	2300      	movs	r3, #0
 8000da2:	733b      	strb	r3, [r7, #12]
    Buf[0] = value;
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Mem_Write(&hi2c1, I2C_ADDRESS, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	2320      	movs	r3, #32
 8000dae:	9302      	str	r3, [sp, #8]
 8000db0:	2301      	movs	r3, #1
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	2301      	movs	r3, #1
 8000dbc:	2152      	movs	r1, #82	; 0x52
 8000dbe:	4803      	ldr	r0, [pc, #12]	; (8000dcc <I2C_WriteByte+0x3c>)
 8000dc0:	f000 fec4 	bl	8001b4c <HAL_I2C_Mem_Write>
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000084 	.word	0x20000084

08000dd0 <I2C_ReadByte>:

int I2C_ReadByte(uint8_t Cmd)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af04      	add	r7, sp, #16
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
    uint8_t Buf[1]={0};
 8000dda:	2300      	movs	r3, #0
 8000ddc:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Mem_Read(&hi2c1, (I2C_ADDRESS)+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	2320      	movs	r3, #32
 8000de4:	9302      	str	r3, [sp, #8]
 8000de6:	2301      	movs	r3, #1
 8000de8:	9301      	str	r3, [sp, #4]
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2301      	movs	r3, #1
 8000df2:	2153      	movs	r1, #83	; 0x53
 8000df4:	4803      	ldr	r0, [pc, #12]	; (8000e04 <I2C_ReadByte+0x34>)
 8000df6:	f000 ffbd 	bl	8001d74 <HAL_I2C_Mem_Read>
    return Buf[0];
 8000dfa:	7b3b      	ldrb	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000084 	.word	0x20000084

08000e08 <TSL2591X_ReadByte>:
parameter:  
            Addr: Register address
Info:
******************************************************************************/
static uint8_t TSL2591X_ReadByte(uint8_t Addr)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
    Addr = Addr | COMMAND_BIT;
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000e18:	71fb      	strb	r3, [r7, #7]
    return I2C_ReadByte(Addr);
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ffd7 	bl	8000dd0 <I2C_ReadByte>
 8000e22:	4603      	mov	r3, r0
 8000e24:	b2db      	uxtb	r3, r3
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <TSL2591X_WriteByte>:
            Addr: Register address
           Value: Write to the value of the register
Info:
******************************************************************************/
static void TSL2591X_WriteByte(uint8_t Addr, uint8_t Value)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	460a      	mov	r2, r1
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	71bb      	strb	r3, [r7, #6]
    Addr = Addr | COMMAND_BIT;
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000e44:	71fb      	strb	r3, [r7, #7]
    I2C_WriteByte(Addr, Value);
 8000e46:	79ba      	ldrb	r2, [r7, #6]
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff9f 	bl	8000d90 <I2C_WriteByte>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <TSL2591X_Enable>:
function:	Enable TSL2591
parameter:
Info:
******************************************************************************/
void TSL2591X_Enable(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0
    TSL2591X_WriteByte(ENABLE_REGISTER, \
 8000e5e:	2193      	movs	r1, #147	; 0x93
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff ffe4 	bl	8000e2e <TSL2591X_WriteByte>
    ENABLE_AIEN | ENABLE_POWERON | ENABLE_AEN | ENABLE_NPIEN);
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <TSL2591X_Disable>:
function:	Disable TSL2591
parameter:
Info:
******************************************************************************/
void TSL2591X_Disable(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0
    TSL2591X_WriteByte(ENABLE_REGISTER, \
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff ffdc 	bl	8000e2e <TSL2591X_WriteByte>
    ENABLE_POWEROFF);
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <TSL2591X_SetGain>:
function:	Set the TSL2591 gain
parameter:
Info:
******************************************************************************/
void TSL2591X_SetGain(uint8_t Gain)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
    uint8_t control=0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73fb      	strb	r3, [r7, #15]
    if(Gain == LOW_AGAIN || Gain == MEDIUM_AGAIN \
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d008      	beq.n	8000ea2 <TSL2591X_SetGain+0x26>
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b10      	cmp	r3, #16
 8000e94:	d005      	beq.n	8000ea2 <TSL2591X_SetGain+0x26>
        || Gain == HIGH_AGAIN || Gain == MAX_AGAIN){
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b20      	cmp	r3, #32
 8000e9a:	d002      	beq.n	8000ea2 <TSL2591X_SetGain+0x26>
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	2b30      	cmp	r3, #48	; 0x30
 8000ea0:	d115      	bne.n	8000ece <TSL2591X_SetGain+0x52>
            control =  TSL2591X_ReadByte(CONTROL_REGISTER);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff ffb0 	bl	8000e08 <TSL2591X_ReadByte>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	73fb      	strb	r3, [r7, #15]
            control &= 0xCf; //0b11001111
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000eb2:	73fb      	strb	r3, [r7, #15]
            control |= Gain;
 8000eb4:	7bfa      	ldrb	r2, [r7, #15]
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	73fb      	strb	r3, [r7, #15]
            TSL2591X_WriteByte(CONTROL_REGISTER, control);
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff ffb4 	bl	8000e2e <TSL2591X_WriteByte>
            TSL2591_Gain = Gain;
 8000ec6:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <TSL2591X_SetGain+0x64>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	7013      	strb	r3, [r2, #0]
 8000ecc:	e003      	b.n	8000ed6 <TSL2591X_SetGain+0x5a>
    }else{
        printf("Gain Parameter Error\r\n");
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <TSL2591X_SetGain+0x68>)
 8000ed0:	f005 f8aa 	bl	8006028 <puts>
    }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000274 	.word	0x20000274
 8000ee4:	0800676c 	.word	0x0800676c

08000ee8 <TSL2591X_SetIntegralTime>:
function:	Set the TSL2591 Integral Time
parameter:
Info:
******************************************************************************/
void TSL2591X_SetIntegralTime(uint8_t Time)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
    uint8_t control=0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73fb      	strb	r3, [r7, #15]
    if(Time < 0x06){
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b05      	cmp	r3, #5
 8000efa:	d815      	bhi.n	8000f28 <TSL2591X_SetIntegralTime+0x40>
        control =  TSL2591X_ReadByte(CONTROL_REGISTER);
 8000efc:	2001      	movs	r0, #1
 8000efe:	f7ff ff83 	bl	8000e08 <TSL2591X_ReadByte>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
        control &= 0xf8; //0b11111000
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	f023 0307 	bic.w	r3, r3, #7
 8000f0c:	73fb      	strb	r3, [r7, #15]
        control |= Time;
 8000f0e:	7bfa      	ldrb	r2, [r7, #15]
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	73fb      	strb	r3, [r7, #15]
        TSL2591X_WriteByte(CONTROL_REGISTER, control);
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f7ff ff87 	bl	8000e2e <TSL2591X_WriteByte>
        TSL2591_Time = Time;
 8000f20:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <TSL2591X_SetIntegralTime+0x50>)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	7013      	strb	r3, [r2, #0]
    }else{
        printf("Integral Time Parameter Error\r\n");
    }
}
 8000f26:	e002      	b.n	8000f2e <TSL2591X_SetIntegralTime+0x46>
        printf("Integral Time Parameter Error\r\n");
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <TSL2591X_SetIntegralTime+0x54>)
 8000f2a:	f005 f87d 	bl	8006028 <puts>
}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000275 	.word	0x20000275
 8000f3c:	08006784 	.word	0x08006784

08000f40 <TSL2591X_Init>:
function:	TSL2591 Initialization
parameter:
Info:
******************************************************************************/
uint8_t TSL2591X_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    TSL2591X_Enable();
 8000f44:	f7ff ff89 	bl	8000e5a <TSL2591X_Enable>
    TSL2591X_SetGain(MEDIUM_AGAIN);
 8000f48:	2010      	movs	r0, #16
 8000f4a:	f7ff ff97 	bl	8000e7c <TSL2591X_SetGain>
    TSL2591X_SetIntegralTime(ATIME_200MS);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f7ff ffca 	bl	8000ee8 <TSL2591X_SetIntegralTime>
    TSL2591X_WriteByte(PERSIST_REGISTER, 0x01);
 8000f54:	2101      	movs	r1, #1
 8000f56:	200c      	movs	r0, #12
 8000f58:	f7ff ff69 	bl	8000e2e <TSL2591X_WriteByte>
    TSL2591X_Disable();
 8000f5c:	f7ff ff85 	bl	8000e6a <TSL2591X_Disable>

    return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 f93d 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f76:	200f      	movs	r0, #15
 8000f78:	f000 f80e 	bl	8000f98 <HAL_InitTick>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	e001      	b.n	8000f8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f88:	f7ff fcae 	bl	80008e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_InitTick+0x6c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d023      	beq.n	8000ff4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x70>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_InitTick+0x6c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f949 	bl	800125a <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10f      	bne.n	8000fee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d809      	bhi.n	8000fe8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fdc:	f000 f913 	bl	8001206 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe0:	4a0a      	ldr	r2, [pc, #40]	; (800100c <HAL_InitTick+0x74>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e007      	b.n	8000ff8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e004      	b.n	8000ff8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e001      	b.n	8000ff8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008
 8001008:	20000000 	.word	0x20000000
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x20>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_IncTick+0x24>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_IncTick+0x24>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008
 8001034:	20000278 	.word	0x20000278

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000278 	.word	0x20000278

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <__NVIC_EnableIRQ+0x38>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d0:	f7ff ff8e 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff29 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff3e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff8e 	bl	8001144 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5d 	bl	80010f0 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff31 	bl	80010b4 <__NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffa2 	bl	80011ac <SysTick_Config>
 8001268:	4603      	mov	r3, r0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e098      	b.n	80013b8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	4b4d      	ldr	r3, [pc, #308]	; (80013c4 <HAL_DMA_Init+0x150>)
 800128e:	429a      	cmp	r2, r3
 8001290:	d80f      	bhi.n	80012b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <HAL_DMA_Init+0x154>)
 800129a:	4413      	add	r3, r2
 800129c:	4a4b      	ldr	r2, [pc, #300]	; (80013cc <HAL_DMA_Init+0x158>)
 800129e:	fba2 2303 	umull	r2, r3, r2, r3
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	009a      	lsls	r2, r3, #2
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a48      	ldr	r2, [pc, #288]	; (80013d0 <HAL_DMA_Init+0x15c>)
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
 80012b0:	e00e      	b.n	80012d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b46      	ldr	r3, [pc, #280]	; (80013d4 <HAL_DMA_Init+0x160>)
 80012ba:	4413      	add	r3, r2
 80012bc:	4a43      	ldr	r2, [pc, #268]	; (80013cc <HAL_DMA_Init+0x158>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	009a      	lsls	r2, r3, #2
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a42      	ldr	r2, [pc, #264]	; (80013d8 <HAL_DMA_Init+0x164>)
 80012ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2202      	movs	r2, #2
 80012d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80012f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800130c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800132a:	d039      	beq.n	80013a0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	4a27      	ldr	r2, [pc, #156]	; (80013d0 <HAL_DMA_Init+0x15c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d11a      	bne.n	800136c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001336:	4b29      	ldr	r3, [pc, #164]	; (80013dc <HAL_DMA_Init+0x168>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f003 031c 	and.w	r3, r3, #28
 8001342:	210f      	movs	r1, #15
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	4924      	ldr	r1, [pc, #144]	; (80013dc <HAL_DMA_Init+0x168>)
 800134c:	4013      	ands	r3, r2
 800134e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <HAL_DMA_Init+0x168>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6859      	ldr	r1, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135c:	f003 031c 	and.w	r3, r3, #28
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	491d      	ldr	r1, [pc, #116]	; (80013dc <HAL_DMA_Init+0x168>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
 800136a:	e019      	b.n	80013a0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_DMA_Init+0x16c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001374:	f003 031c 	and.w	r3, r3, #28
 8001378:	210f      	movs	r1, #15
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	4917      	ldr	r1, [pc, #92]	; (80013e0 <HAL_DMA_Init+0x16c>)
 8001382:	4013      	ands	r3, r2
 8001384:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_DMA_Init+0x16c>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6859      	ldr	r1, [r3, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f003 031c 	and.w	r3, r3, #28
 8001396:	fa01 f303 	lsl.w	r3, r1, r3
 800139a:	4911      	ldr	r1, [pc, #68]	; (80013e0 <HAL_DMA_Init+0x16c>)
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40020407 	.word	0x40020407
 80013c8:	bffdfff8 	.word	0xbffdfff8
 80013cc:	cccccccd 	.word	0xcccccccd
 80013d0:	40020000 	.word	0x40020000
 80013d4:	bffdfbf8 	.word	0xbffdfbf8
 80013d8:	40020400 	.word	0x40020400
 80013dc:	400200a8 	.word	0x400200a8
 80013e0:	400204a8 	.word	0x400204a8

080013e4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d008      	beq.n	800140e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2204      	movs	r2, #4
 8001400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e022      	b.n	8001454 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 020e 	bic.w	r2, r2, #14
 800141c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0201 	bic.w	r2, r2, #1
 800142c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f003 021c 	and.w	r2, r3, #28
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	2101      	movs	r1, #1
 800143c:	fa01 f202 	lsl.w	r2, r1, r2
 8001440:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d005      	beq.n	8001484 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2204      	movs	r2, #4
 800147c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	e029      	b.n	80014d8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 020e 	bic.w	r2, r2, #14
 8001492:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0201 	bic.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a8:	f003 021c 	and.w	r2, r3, #28
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	2101      	movs	r1, #1
 80014b2:	fa01 f202 	lsl.w	r2, r1, r2
 80014b6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	4798      	blx	r3
    }
  }
  return status;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f003 031c 	and.w	r3, r3, #28
 8001502:	2204      	movs	r2, #4
 8001504:	409a      	lsls	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d026      	beq.n	800155c <HAL_DMA_IRQHandler+0x7a>
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d021      	beq.n	800155c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0320 	and.w	r3, r3, #32
 8001522:	2b00      	cmp	r3, #0
 8001524:	d107      	bne.n	8001536 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0204 	bic.w	r2, r2, #4
 8001534:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f003 021c 	and.w	r2, r3, #28
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	2104      	movs	r1, #4
 8001544:	fa01 f202 	lsl.w	r2, r1, r2
 8001548:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	2b00      	cmp	r3, #0
 8001550:	d071      	beq.n	8001636 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800155a:	e06c      	b.n	8001636 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	f003 031c 	and.w	r3, r3, #28
 8001564:	2202      	movs	r2, #2
 8001566:	409a      	lsls	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4013      	ands	r3, r2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d02e      	beq.n	80015ce <HAL_DMA_IRQHandler+0xec>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d029      	beq.n	80015ce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0320 	and.w	r3, r3, #32
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10b      	bne.n	80015a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 020a 	bic.w	r2, r2, #10
 8001596:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a4:	f003 021c 	and.w	r2, r3, #28
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	2102      	movs	r1, #2
 80015ae:	fa01 f202 	lsl.w	r2, r1, r2
 80015b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d038      	beq.n	8001636 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80015cc:	e033      	b.n	8001636 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	f003 031c 	and.w	r3, r3, #28
 80015d6:	2208      	movs	r2, #8
 80015d8:	409a      	lsls	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4013      	ands	r3, r2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d02a      	beq.n	8001638 <HAL_DMA_IRQHandler+0x156>
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d025      	beq.n	8001638 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 020e 	bic.w	r2, r2, #14
 80015fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	f003 021c 	and.w	r2, r3, #28
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	2101      	movs	r1, #1
 800160a:	fa01 f202 	lsl.w	r2, r1, r2
 800160e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001636:	bf00      	nop
 8001638:	bf00      	nop
}
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800164e:	b2db      	uxtb	r3, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800165c:	b480      	push	{r7}
 800165e:	b087      	sub	sp, #28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166a:	e17f      	b.n	800196c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2101      	movs	r1, #1
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	4013      	ands	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 8171 	beq.w	8001966 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b01      	cmp	r3, #1
 800168e:	d005      	beq.n	800169c <HAL_GPIO_Init+0x40>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d130      	bne.n	80016fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016d2:	2201      	movs	r2, #1
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	f003 0201 	and.w	r2, r3, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b03      	cmp	r3, #3
 8001708:	d118      	bne.n	800173c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001710:	2201      	movs	r2, #1
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	08db      	lsrs	r3, r3, #3
 8001726:	f003 0201 	and.w	r2, r3, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b03      	cmp	r3, #3
 8001746:	d017      	beq.n	8001778 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	2203      	movs	r2, #3
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d123      	bne.n	80017cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	08da      	lsrs	r2, r3, #3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3208      	adds	r2, #8
 800178c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	220f      	movs	r2, #15
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	08da      	lsrs	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3208      	adds	r2, #8
 80017c6:	6939      	ldr	r1, [r7, #16]
 80017c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0203 	and.w	r2, r3, #3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80ac 	beq.w	8001966 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	4b5f      	ldr	r3, [pc, #380]	; (800198c <HAL_GPIO_Init+0x330>)
 8001810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001812:	4a5e      	ldr	r2, [pc, #376]	; (800198c <HAL_GPIO_Init+0x330>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6613      	str	r3, [r2, #96]	; 0x60
 800181a:	4b5c      	ldr	r3, [pc, #368]	; (800198c <HAL_GPIO_Init+0x330>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001826:	4a5a      	ldr	r2, [pc, #360]	; (8001990 <HAL_GPIO_Init+0x334>)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	3302      	adds	r3, #2
 800182e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	220f      	movs	r2, #15
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001850:	d025      	beq.n	800189e <HAL_GPIO_Init+0x242>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4f      	ldr	r2, [pc, #316]	; (8001994 <HAL_GPIO_Init+0x338>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d01f      	beq.n	800189a <HAL_GPIO_Init+0x23e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4e      	ldr	r2, [pc, #312]	; (8001998 <HAL_GPIO_Init+0x33c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d019      	beq.n	8001896 <HAL_GPIO_Init+0x23a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4d      	ldr	r2, [pc, #308]	; (800199c <HAL_GPIO_Init+0x340>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0x236>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4c      	ldr	r2, [pc, #304]	; (80019a0 <HAL_GPIO_Init+0x344>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00d      	beq.n	800188e <HAL_GPIO_Init+0x232>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4b      	ldr	r2, [pc, #300]	; (80019a4 <HAL_GPIO_Init+0x348>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d007      	beq.n	800188a <HAL_GPIO_Init+0x22e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4a      	ldr	r2, [pc, #296]	; (80019a8 <HAL_GPIO_Init+0x34c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d101      	bne.n	8001886 <HAL_GPIO_Init+0x22a>
 8001882:	2306      	movs	r3, #6
 8001884:	e00c      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 8001886:	2307      	movs	r3, #7
 8001888:	e00a      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 800188a:	2305      	movs	r3, #5
 800188c:	e008      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 800188e:	2304      	movs	r3, #4
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 8001892:	2303      	movs	r3, #3
 8001894:	e004      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 8001896:	2302      	movs	r3, #2
 8001898:	e002      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 800189e:	2300      	movs	r3, #0
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	f002 0203 	and.w	r2, r2, #3
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	4093      	lsls	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018b0:	4937      	ldr	r1, [pc, #220]	; (8001990 <HAL_GPIO_Init+0x334>)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018be:	4b3b      	ldr	r3, [pc, #236]	; (80019ac <HAL_GPIO_Init+0x350>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018e2:	4a32      	ldr	r2, [pc, #200]	; (80019ac <HAL_GPIO_Init+0x350>)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <HAL_GPIO_Init+0x350>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800190c:	4a27      	ldr	r2, [pc, #156]	; (80019ac <HAL_GPIO_Init+0x350>)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_GPIO_Init+0x350>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001936:	4a1d      	ldr	r2, [pc, #116]	; (80019ac <HAL_GPIO_Init+0x350>)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_GPIO_Init+0x350>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001960:	4a12      	ldr	r2, [pc, #72]	; (80019ac <HAL_GPIO_Init+0x350>)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	f47f ae78 	bne.w	800166c <HAL_GPIO_Init+0x10>
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000
 8001990:	40010000 	.word	0x40010000
 8001994:	48000400 	.word	0x48000400
 8001998:	48000800 	.word	0x48000800
 800199c:	48000c00 	.word	0x48000c00
 80019a0:	48001000 	.word	0x48001000
 80019a4:	48001400 	.word	0x48001400
 80019a8:	48001800 	.word	0x48001800
 80019ac:	40010400 	.word	0x40010400

080019b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4013      	ands	r3, r2
 80019c8:	041a      	lsls	r2, r3, #16
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	43d9      	mvns	r1, r3
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	400b      	ands	r3, r1
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	619a      	str	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fefe 	bl	8000804 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40010400 	.word	0x40010400

08001a14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e08d      	b.n	8001b42 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7fe fe00 	bl	8000640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2224      	movs	r2, #36	; 0x24
 8001a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0201 	bic.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d107      	bne.n	8001a8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	e006      	b.n	8001a9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d108      	bne.n	8001ab6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	e007      	b.n	8001ac6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ac4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ad8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ae8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69d9      	ldr	r1, [r3, #28]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1a      	ldr	r2, [r3, #32]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	4608      	mov	r0, r1
 8001b56:	4611      	mov	r1, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	817b      	strh	r3, [r7, #10]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	813b      	strh	r3, [r7, #8]
 8001b62:	4613      	mov	r3, r2
 8001b64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b20      	cmp	r3, #32
 8001b70:	f040 80f9 	bne.w	8001d66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <HAL_I2C_Mem_Write+0x34>
 8001b7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0ed      	b.n	8001d68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_I2C_Mem_Write+0x4e>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e0e6      	b.n	8001d68 <HAL_I2C_Mem_Write+0x21c>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ba2:	f7ff fa49 	bl	8001038 <HAL_GetTick>
 8001ba6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2319      	movs	r3, #25
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 ffec 	bl	8002b92 <I2C_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0d1      	b.n	8001d68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2221      	movs	r2, #33	; 0x21
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a3a      	ldr	r2, [r7, #32]
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bec:	88f8      	ldrh	r0, [r7, #6]
 8001bee:	893a      	ldrh	r2, [r7, #8]
 8001bf0:	8979      	ldrh	r1, [r7, #10]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 fb81 	bl	8002304 <I2C_RequestMemoryWrite>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0a9      	b.n	8001d68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2bff      	cmp	r3, #255	; 0xff
 8001c1c:	d90e      	bls.n	8001c3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	22ff      	movs	r2, #255	; 0xff
 8001c22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	8979      	ldrh	r1, [r7, #10]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f001 f965 	bl	8002f04 <I2C_TransferConfig>
 8001c3a:	e00f      	b.n	8001c5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	8979      	ldrh	r1, [r7, #10]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f001 f954 	bl	8002f04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 ffe5 	bl	8002c30 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e07b      	b.n	8001d68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	781a      	ldrb	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d034      	beq.n	8001d14 <HAL_I2C_Mem_Write+0x1c8>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d130      	bne.n	8001d14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2180      	movs	r1, #128	; 0x80
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 ff68 	bl	8002b92 <I2C_WaitOnFlagUntilTimeout>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e04d      	b.n	8001d68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2bff      	cmp	r3, #255	; 0xff
 8001cd4:	d90e      	bls.n	8001cf4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	22ff      	movs	r2, #255	; 0xff
 8001cda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	8979      	ldrh	r1, [r7, #10]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f001 f909 	bl	8002f04 <I2C_TransferConfig>
 8001cf2:	e00f      	b.n	8001d14 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	8979      	ldrh	r1, [r7, #10]
 8001d06:	2300      	movs	r3, #0
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f001 f8f8 	bl	8002f04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d19e      	bne.n	8001c5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 ffcb 	bl	8002cbe <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e01a      	b.n	8001d68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2220      	movs	r2, #32
 8001d38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_I2C_Mem_Write+0x224>)
 8001d46:	400b      	ands	r3, r1
 8001d48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001d66:	2302      	movs	r3, #2
  }
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	fe00e800 	.word	0xfe00e800

08001d74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	4608      	mov	r0, r1
 8001d7e:	4611      	mov	r1, r2
 8001d80:	461a      	mov	r2, r3
 8001d82:	4603      	mov	r3, r0
 8001d84:	817b      	strh	r3, [r7, #10]
 8001d86:	460b      	mov	r3, r1
 8001d88:	813b      	strh	r3, [r7, #8]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	f040 80fd 	bne.w	8001f96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <HAL_I2C_Mem_Read+0x34>
 8001da2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d105      	bne.n	8001db4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0f1      	b.n	8001f98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_I2C_Mem_Read+0x4e>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e0ea      	b.n	8001f98 <HAL_I2C_Mem_Read+0x224>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dca:	f7ff f935 	bl	8001038 <HAL_GetTick>
 8001dce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2319      	movs	r3, #25
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 fed8 	bl	8002b92 <I2C_WaitOnFlagUntilTimeout>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0d5      	b.n	8001f98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2222      	movs	r2, #34	; 0x22
 8001df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2240      	movs	r2, #64	; 0x40
 8001df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a3a      	ldr	r2, [r7, #32]
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e14:	88f8      	ldrh	r0, [r7, #6]
 8001e16:	893a      	ldrh	r2, [r7, #8]
 8001e18:	8979      	ldrh	r1, [r7, #10]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	9301      	str	r3, [sp, #4]
 8001e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	4603      	mov	r3, r0
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 fac1 	bl	80023ac <I2C_RequestMemoryRead>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0ad      	b.n	8001f98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	2bff      	cmp	r3, #255	; 0xff
 8001e44:	d90e      	bls.n	8001e64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	22ff      	movs	r2, #255	; 0xff
 8001e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	8979      	ldrh	r1, [r7, #10]
 8001e54:	4b52      	ldr	r3, [pc, #328]	; (8001fa0 <HAL_I2C_Mem_Read+0x22c>)
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f001 f851 	bl	8002f04 <I2C_TransferConfig>
 8001e62:	e00f      	b.n	8001e84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	8979      	ldrh	r1, [r7, #10]
 8001e76:	4b4a      	ldr	r3, [pc, #296]	; (8001fa0 <HAL_I2C_Mem_Read+0x22c>)
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f001 f840 	bl	8002f04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2104      	movs	r1, #4
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 fe7f 	bl	8002b92 <I2C_WaitOnFlagUntilTimeout>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e07c      	b.n	8001f98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d034      	beq.n	8001f44 <HAL_I2C_Mem_Read+0x1d0>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d130      	bne.n	8001f44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 fe50 	bl	8002b92 <I2C_WaitOnFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e04d      	b.n	8001f98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2bff      	cmp	r3, #255	; 0xff
 8001f04:	d90e      	bls.n	8001f24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	22ff      	movs	r2, #255	; 0xff
 8001f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	8979      	ldrh	r1, [r7, #10]
 8001f14:	2300      	movs	r3, #0
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 fff1 	bl	8002f04 <I2C_TransferConfig>
 8001f22:	e00f      	b.n	8001f44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	8979      	ldrh	r1, [r7, #10]
 8001f36:	2300      	movs	r3, #0
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 ffe0 	bl	8002f04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d19a      	bne.n	8001e84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 feb3 	bl	8002cbe <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e01a      	b.n	8001f98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2220      	movs	r2, #32
 8001f68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6859      	ldr	r1, [r3, #4]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_I2C_Mem_Read+0x230>)
 8001f76:	400b      	ands	r3, r1
 8001f78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	80002400 	.word	0x80002400
 8001fa4:	fe00e800 	.word	0xfe00e800

08001fa8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	68f9      	ldr	r1, [r7, #12]
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00f      	beq.n	800201e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00a      	beq.n	800201e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	f043 0201 	orr.w	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800201c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00f      	beq.n	8002048 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f043 0208 	orr.w	r2, r3, #8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002046:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00f      	beq.n	8002072 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	f043 0202 	orr.w	r2, r3, #2
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002070:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 030b 	and.w	r3, r3, #11
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002082:	68f9      	ldr	r1, [r7, #12]
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fc2b 	bl	80028e0 <I2C_ITError>
  }
}
 800208a:	bf00      	nop
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	70fb      	strb	r3, [r7, #3]
 80020c6:	4613      	mov	r3, r2
 80020c8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <I2C_Slave_ISR_IT+0x24>
 8002132:	2302      	movs	r3, #2
 8002134:	e0e1      	b.n	80022fa <I2C_Slave_ISR_IT+0x1e8>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002152:	6939      	ldr	r1, [r7, #16]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 fa5d 	bl	8002614 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b00      	cmp	r3, #0
 8002162:	d04b      	beq.n	80021fc <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800216a:	2b00      	cmp	r3, #0
 800216c:	d046      	beq.n	80021fc <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d128      	bne.n	80021ca <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b28      	cmp	r3, #40	; 0x28
 8002182:	d108      	bne.n	8002196 <I2C_Slave_ISR_IT+0x84>
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800218a:	d104      	bne.n	8002196 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800218c:	6939      	ldr	r1, [r7, #16]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 fb52 	bl	8002838 <I2C_ITListenCplt>
 8002194:	e031      	b.n	80021fa <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b29      	cmp	r3, #41	; 0x29
 80021a0:	d10e      	bne.n	80021c0 <I2C_Slave_ISR_IT+0xae>
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021a8:	d00a      	beq.n	80021c0 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2210      	movs	r2, #16
 80021b0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 fcab 	bl	8002b0e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f9cf 	bl	800255c <I2C_ITSlaveSeqCplt>
 80021be:	e01c      	b.n	80021fa <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2210      	movs	r2, #16
 80021c6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80021c8:	e08f      	b.n	80022ea <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2210      	movs	r2, #16
 80021d0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f043 0204 	orr.w	r2, r3, #4
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <I2C_Slave_ISR_IT+0xda>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ea:	d17e      	bne.n	80022ea <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	4619      	mov	r1, r3
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 fb74 	bl	80028e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80021f8:	e077      	b.n	80022ea <I2C_Slave_ISR_IT+0x1d8>
 80021fa:	e076      	b.n	80022ea <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d02f      	beq.n	8002266 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800220c:	2b00      	cmp	r3, #0
 800220e:	d02a      	beq.n	8002266 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d018      	beq.n	800224c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002236:	3b01      	subs	r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d14b      	bne.n	80022ee <I2C_Slave_ISR_IT+0x1dc>
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800225c:	d047      	beq.n	80022ee <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f97c 	bl	800255c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002264:	e043      	b.n	80022ee <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d009      	beq.n	8002284 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002276:	2b00      	cmp	r3, #0
 8002278:	d004      	beq.n	8002284 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800227a:	6939      	ldr	r1, [r7, #16]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f8e9 	bl	8002454 <I2C_ITAddrCplt>
 8002282:	e035      	b.n	80022f0 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d030      	beq.n	80022f0 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002294:	2b00      	cmp	r3, #0
 8002296:	d02b      	beq.n	80022f0 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d018      	beq.n	80022d4 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	851a      	strh	r2, [r3, #40]	; 0x28
 80022d2:	e00d      	b.n	80022f0 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022da:	d002      	beq.n	80022e2 <I2C_Slave_ISR_IT+0x1d0>
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f93a 	bl	800255c <I2C_ITSlaveSeqCplt>
 80022e8:	e002      	b.n	80022f0 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80022ea:	bf00      	nop
 80022ec:	e000      	b.n	80022f0 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80022ee:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	4608      	mov	r0, r1
 800230e:	4611      	mov	r1, r2
 8002310:	461a      	mov	r2, r3
 8002312:	4603      	mov	r3, r0
 8002314:	817b      	strh	r3, [r7, #10]
 8002316:	460b      	mov	r3, r1
 8002318:	813b      	strh	r3, [r7, #8]
 800231a:	4613      	mov	r3, r2
 800231c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	8979      	ldrh	r1, [r7, #10]
 8002324:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <I2C_RequestMemoryWrite+0xa4>)
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 fde9 	bl	8002f04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	69b9      	ldr	r1, [r7, #24]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fc7a 	bl	8002c30 <I2C_WaitOnTXISFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e02c      	b.n	80023a0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d105      	bne.n	8002358 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800234c:	893b      	ldrh	r3, [r7, #8]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	629a      	str	r2, [r3, #40]	; 0x28
 8002356:	e015      	b.n	8002384 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002358:	893b      	ldrh	r3, [r7, #8]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	b29b      	uxth	r3, r3
 800235e:	b2da      	uxtb	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	69b9      	ldr	r1, [r7, #24]
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 fc60 	bl	8002c30 <I2C_WaitOnTXISFlagUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e012      	b.n	80023a0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800237a:	893b      	ldrh	r3, [r7, #8]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2200      	movs	r2, #0
 800238c:	2180      	movs	r1, #128	; 0x80
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 fbff 	bl	8002b92 <I2C_WaitOnFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	80002000 	.word	0x80002000

080023ac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	4608      	mov	r0, r1
 80023b6:	4611      	mov	r1, r2
 80023b8:	461a      	mov	r2, r3
 80023ba:	4603      	mov	r3, r0
 80023bc:	817b      	strh	r3, [r7, #10]
 80023be:	460b      	mov	r3, r1
 80023c0:	813b      	strh	r3, [r7, #8]
 80023c2:	4613      	mov	r3, r2
 80023c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	8979      	ldrh	r1, [r7, #10]
 80023cc:	4b20      	ldr	r3, [pc, #128]	; (8002450 <I2C_RequestMemoryRead+0xa4>)
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	2300      	movs	r3, #0
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fd96 	bl	8002f04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	69b9      	ldr	r1, [r7, #24]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 fc27 	bl	8002c30 <I2C_WaitOnTXISFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e02c      	b.n	8002446 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d105      	bne.n	80023fe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023f2:	893b      	ldrh	r3, [r7, #8]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
 80023fc:	e015      	b.n	800242a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023fe:	893b      	ldrh	r3, [r7, #8]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	b29b      	uxth	r3, r3
 8002404:	b2da      	uxtb	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	69b9      	ldr	r1, [r7, #24]
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fc0d 	bl	8002c30 <I2C_WaitOnTXISFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e012      	b.n	8002446 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002420:	893b      	ldrh	r3, [r7, #8]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	2200      	movs	r2, #0
 8002432:	2140      	movs	r1, #64	; 0x40
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 fbac 	bl	8002b92 <I2C_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	80002000 	.word	0x80002000

08002454 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800246a:	2b28      	cmp	r3, #40	; 0x28
 800246c:	d16a      	bne.n	8002544 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	0c1b      	lsrs	r3, r3, #16
 8002486:	b29b      	uxth	r3, r3
 8002488:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800248c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	b29b      	uxth	r3, r3
 8002496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800249a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80024a8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d138      	bne.n	8002524 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80024b2:	897b      	ldrh	r3, [r7, #10]
 80024b4:	09db      	lsrs	r3, r3, #7
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	89bb      	ldrh	r3, [r7, #12]
 80024ba:	4053      	eors	r3, r2
 80024bc:	b29b      	uxth	r3, r3
 80024be:	f003 0306 	and.w	r3, r3, #6
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d11c      	bne.n	8002500 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80024c6:	897b      	ldrh	r3, [r7, #10]
 80024c8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d13b      	bne.n	8002554 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2208      	movs	r2, #8
 80024e8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024f2:	89ba      	ldrh	r2, [r7, #12]
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	4619      	mov	r1, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff fdde 	bl	80020ba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80024fe:	e029      	b.n	8002554 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002500:	893b      	ldrh	r3, [r7, #8]
 8002502:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fd2d 	bl	8002f68 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002516:	89ba      	ldrh	r2, [r7, #12]
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	4619      	mov	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff fdcc 	bl	80020ba <HAL_I2C_AddrCallback>
}
 8002522:	e017      	b.n	8002554 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fd1d 	bl	8002f68 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002536:	89ba      	ldrh	r2, [r7, #12]
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	4619      	mov	r1, r3
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff fdbc 	bl	80020ba <HAL_I2C_AddrCallback>
}
 8002542:	e007      	b.n	8002554 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2208      	movs	r2, #8
 800254a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d008      	beq.n	8002590 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	e00c      	b.n	80025aa <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025a8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b29      	cmp	r3, #41	; 0x29
 80025b4:	d112      	bne.n	80025dc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2228      	movs	r2, #40	; 0x28
 80025ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2221      	movs	r2, #33	; 0x21
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80025c4:	2101      	movs	r1, #1
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fcce 	bl	8002f68 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff fd5c 	bl	8002092 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80025da:	e017      	b.n	800260c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b2a      	cmp	r3, #42	; 0x2a
 80025e6:	d111      	bne.n	800260c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2228      	movs	r2, #40	; 0x28
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2222      	movs	r2, #34	; 0x22
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025f6:	2102      	movs	r1, #2
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fcb5 	bl	8002f68 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff fd4d 	bl	80020a6 <HAL_I2C_SlaveRxCpltCallback>
}
 800260c:	bf00      	nop
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002630:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2220      	movs	r2, #32
 8002638:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	2b21      	cmp	r3, #33	; 0x21
 800263e:	d002      	beq.n	8002646 <I2C_ITSlaveCplt+0x32>
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b29      	cmp	r3, #41	; 0x29
 8002644:	d108      	bne.n	8002658 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002646:	f248 0101 	movw	r1, #32769	; 0x8001
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fc8c 	bl	8002f68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2221      	movs	r2, #33	; 0x21
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
 8002656:	e019      	b.n	800268c <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	2b22      	cmp	r3, #34	; 0x22
 800265c:	d002      	beq.n	8002664 <I2C_ITSlaveCplt+0x50>
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	2b2a      	cmp	r3, #42	; 0x2a
 8002662:	d108      	bne.n	8002676 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002664:	f248 0102 	movw	r1, #32770	; 0x8002
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fc7d 	bl	8002f68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2222      	movs	r2, #34	; 0x22
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
 8002674:	e00a      	b.n	800268c <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b28      	cmp	r3, #40	; 0x28
 800267a:	d107      	bne.n	800268c <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800267c:	f248 0103 	movw	r1, #32771	; 0x8003
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fc71 	bl	8002f68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800269a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6859      	ldr	r1, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b62      	ldr	r3, [pc, #392]	; (8002830 <I2C_ITSlaveCplt+0x21c>)
 80026a8:	400b      	ands	r3, r1
 80026aa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fa2e 	bl	8002b0e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d013      	beq.n	80026e4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026ca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01f      	beq.n	8002714 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026e2:	e017      	b.n	8002714 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d012      	beq.n	8002714 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026fc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d006      	beq.n	8002714 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	b29a      	uxth	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	d020      	beq.n	8002760 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f023 0304 	bic.w	r3, r3, #4
 8002724:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00c      	beq.n	8002760 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f043 0204 	orr.w	r2, r3, #4
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	4619      	mov	r1, r3
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f8a4 	bl	80028e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b28      	cmp	r3, #40	; 0x28
 80027a2:	d141      	bne.n	8002828 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80027a4:	6979      	ldr	r1, [r7, #20]
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f846 	bl	8002838 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80027ac:	e03c      	b.n	8002828 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027b6:	d014      	beq.n	80027e2 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff fecf 	bl	800255c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <I2C_ITSlaveCplt+0x220>)
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff fc7b 	bl	80020d6 <HAL_I2C_ListenCpltCallback>
}
 80027e0:	e022      	b.n	8002828 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b22      	cmp	r3, #34	; 0x22
 80027ec:	d10e      	bne.n	800280c <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff fc4e 	bl	80020a6 <HAL_I2C_SlaveRxCpltCallback>
}
 800280a:	e00d      	b.n	8002828 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff fc35 	bl	8002092 <HAL_I2C_SlaveTxCpltCallback>
}
 8002828:	bf00      	nop
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	fe00e800 	.word	0xfe00e800
 8002834:	ffff0000 	.word	0xffff0000

08002838 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a25      	ldr	r2, [pc, #148]	; (80028dc <I2C_ITListenCplt+0xa4>)
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d022      	beq.n	80028b4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	2b00      	cmp	r3, #0
 800288c:	d012      	beq.n	80028b4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ac:	f043 0204 	orr.w	r2, r3, #4
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80028b4:	f248 0103 	movw	r1, #32771	; 0x8003
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fb55 	bl	8002f68 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2210      	movs	r2, #16
 80028c4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff fc01 	bl	80020d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	ffff0000 	.word	0xffff0000

080028e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a6d      	ldr	r2, [pc, #436]	; (8002ab4 <I2C_ITError+0x1d4>)
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	2b28      	cmp	r3, #40	; 0x28
 8002916:	d005      	beq.n	8002924 <I2C_ITError+0x44>
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b29      	cmp	r3, #41	; 0x29
 800291c:	d002      	beq.n	8002924 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	2b2a      	cmp	r3, #42	; 0x2a
 8002922:	d10b      	bne.n	800293c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002924:	2103      	movs	r1, #3
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fb1e 	bl	8002f68 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2228      	movs	r2, #40	; 0x28
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a60      	ldr	r2, [pc, #384]	; (8002ab8 <I2C_ITError+0x1d8>)
 8002938:	635a      	str	r2, [r3, #52]	; 0x34
 800293a:	e030      	b.n	800299e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800293c:	f248 0103 	movw	r1, #32771	; 0x8003
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fb11 	bl	8002f68 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f8e1 	bl	8002b0e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b60      	cmp	r3, #96	; 0x60
 8002956:	d01f      	beq.n	8002998 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b20      	cmp	r3, #32
 800296c:	d114      	bne.n	8002998 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b10      	cmp	r3, #16
 800297a:	d109      	bne.n	8002990 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2210      	movs	r2, #16
 8002982:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	f043 0204 	orr.w	r2, r3, #4
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2220      	movs	r2, #32
 8002996:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d039      	beq.n	8002a20 <I2C_ITError+0x140>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b11      	cmp	r3, #17
 80029b0:	d002      	beq.n	80029b8 <I2C_ITError+0xd8>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b21      	cmp	r3, #33	; 0x21
 80029b6:	d133      	bne.n	8002a20 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029c6:	d107      	bne.n	80029d8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe fe2f 	bl	8001640 <HAL_DMA_GetState>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d017      	beq.n	8002a18 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	4a33      	ldr	r2, [pc, #204]	; (8002abc <I2C_ITError+0x1dc>)
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fd2f 	bl	8001460 <HAL_DMA_Abort_IT>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d04d      	beq.n	8002aa4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a12:	4610      	mov	r0, r2
 8002a14:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a16:	e045      	b.n	8002aa4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f851 	bl	8002ac0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a1e:	e041      	b.n	8002aa4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d039      	beq.n	8002a9c <I2C_ITError+0x1bc>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b12      	cmp	r3, #18
 8002a2c:	d002      	beq.n	8002a34 <I2C_ITError+0x154>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b22      	cmp	r3, #34	; 0x22
 8002a32:	d133      	bne.n	8002a9c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a42:	d107      	bne.n	8002a54 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a52:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe fdf1 	bl	8001640 <HAL_DMA_GetState>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d017      	beq.n	8002a94 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	4a14      	ldr	r2, [pc, #80]	; (8002abc <I2C_ITError+0x1dc>)
 8002a6a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fcf1 	bl	8001460 <HAL_DMA_Abort_IT>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d011      	beq.n	8002aa8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a92:	e009      	b.n	8002aa8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f813 	bl	8002ac0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a9a:	e005      	b.n	8002aa8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f80f 	bl	8002ac0 <I2C_TreatErrorCallback>
  }
}
 8002aa2:	e002      	b.n	8002aaa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002aa4:	bf00      	nop
 8002aa6:	e000      	b.n	8002aaa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002aa8:	bf00      	nop
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	ffff0000 	.word	0xffff0000
 8002ab8:	08002113 	.word	0x08002113
 8002abc:	08002b57 	.word	0x08002b57

08002ac0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b60      	cmp	r3, #96	; 0x60
 8002ad2:	d10e      	bne.n	8002af2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff fb07 	bl	80020fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002af0:	e009      	b.n	8002b06 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff faf2 	bl	80020ea <HAL_I2C_ErrorCallback>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d103      	bne.n	8002b2c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d007      	beq.n	8002b4a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699a      	ldr	r2, [r3, #24]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	619a      	str	r2, [r3, #24]
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b70:	2200      	movs	r2, #0
 8002b72:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b80:	2200      	movs	r2, #0
 8002b82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f7ff ff9b 	bl	8002ac0 <I2C_TreatErrorCallback>
}
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	603b      	str	r3, [r7, #0]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba2:	e031      	b.n	8002c08 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002baa:	d02d      	beq.n	8002c08 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bac:	f7fe fa44 	bl	8001038 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d302      	bcc.n	8002bc2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d122      	bne.n	8002c08 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699a      	ldr	r2, [r3, #24]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	bf0c      	ite	eq
 8002bd2:	2301      	moveq	r3, #1
 8002bd4:	2300      	movne	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d113      	bne.n	8002c08 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e00f      	b.n	8002c28 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	4013      	ands	r3, r2
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d0be      	beq.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c3c:	e033      	b.n	8002ca6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f87e 	bl	8002d44 <I2C_IsErrorOccurred>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e031      	b.n	8002cb6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c58:	d025      	beq.n	8002ca6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5a:	f7fe f9ed 	bl	8001038 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d302      	bcc.n	8002c70 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d11a      	bne.n	8002ca6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d013      	beq.n	8002ca6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e007      	b.n	8002cb6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d1c4      	bne.n	8002c3e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cca:	e02f      	b.n	8002d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f837 	bl	8002d44 <I2C_IsErrorOccurred>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e02d      	b.n	8002d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce0:	f7fe f9aa 	bl	8001038 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d302      	bcc.n	8002cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d11a      	bne.n	8002d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d013      	beq.n	8002d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e007      	b.n	8002d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d1c8      	bne.n	8002ccc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d068      	beq.n	8002e42 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2210      	movs	r2, #16
 8002d76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d78:	e049      	b.n	8002e0e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d80:	d045      	beq.n	8002e0e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d82:	f7fe f959 	bl	8001038 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d302      	bcc.n	8002d98 <I2C_IsErrorOccurred+0x54>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d13a      	bne.n	8002e0e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002daa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dba:	d121      	bne.n	8002e00 <I2C_IsErrorOccurred+0xbc>
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dc2:	d01d      	beq.n	8002e00 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d01a      	beq.n	8002e00 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dd8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002dda:	f7fe f92d 	bl	8001038 <HAL_GetTick>
 8002dde:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002de0:	e00e      	b.n	8002e00 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002de2:	f7fe f929 	bl	8001038 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b19      	cmp	r3, #25
 8002dee:	d907      	bls.n	8002e00 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	f043 0320 	orr.w	r3, r3, #32
 8002df6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002dfe:	e006      	b.n	8002e0e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d1e9      	bne.n	8002de2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d003      	beq.n	8002e24 <I2C_IsErrorOccurred+0xe0>
 8002e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0aa      	beq.n	8002d7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d103      	bne.n	8002e34 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2220      	movs	r2, #32
 8002e32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	f043 0304 	orr.w	r3, r3, #4
 8002e3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00b      	beq.n	8002e6c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00b      	beq.n	8002e8e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	f043 0308 	orr.w	r3, r3, #8
 8002e7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00b      	beq.n	8002eb0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	f043 0302 	orr.w	r3, r3, #2
 8002e9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01c      	beq.n	8002ef2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f7ff fe28 	bl	8002b0e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <I2C_IsErrorOccurred+0x1bc>)
 8002eca:	400b      	ands	r3, r1
 8002ecc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3728      	adds	r7, #40	; 0x28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	fe00e800 	.word	0xfe00e800

08002f04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	817b      	strh	r3, [r7, #10]
 8002f12:	4613      	mov	r3, r2
 8002f14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f16:	897b      	ldrh	r3, [r7, #10]
 8002f18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f1c:	7a7b      	ldrb	r3, [r7, #9]
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	0d5b      	lsrs	r3, r3, #21
 8002f3e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <I2C_TransferConfig+0x60>)
 8002f44:	430b      	orrs	r3, r1
 8002f46:	43db      	mvns	r3, r3
 8002f48:	ea02 0103 	and.w	r1, r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f56:	bf00      	nop
 8002f58:	371c      	adds	r7, #28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	03ff63ff 	.word	0x03ff63ff

08002f68 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002f78:	887b      	ldrh	r3, [r7, #2]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00f      	beq.n	8002fa2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002f88:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f96:	2b28      	cmp	r3, #40	; 0x28
 8002f98:	d003      	beq.n	8002fa2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002fa0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00f      	beq.n	8002fcc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002fb2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fc0:	2b28      	cmp	r3, #40	; 0x28
 8002fc2:	d003      	beq.n	8002fcc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002fca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002fcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da03      	bge.n	8002fdc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002fda:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002fdc:	887b      	ldrh	r3, [r7, #2]
 8002fde:	2b10      	cmp	r3, #16
 8002fe0:	d103      	bne.n	8002fea <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d103      	bne.n	8002ff8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f043 0320 	orr.w	r3, r3, #32
 8002ff6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	2b40      	cmp	r3, #64	; 0x40
 8002ffc:	d103      	bne.n	8003006 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003004:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6819      	ldr	r1, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	43da      	mvns	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	400a      	ands	r2, r1
 8003016:	601a      	str	r2, [r3, #0]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b20      	cmp	r3, #32
 8003038:	d138      	bne.n	80030ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003044:	2302      	movs	r3, #2
 8003046:	e032      	b.n	80030ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2224      	movs	r2, #36	; 0x24
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003076:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6819      	ldr	r1, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e000      	b.n	80030ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
  }
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b085      	sub	sp, #20
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d139      	bne.n	8003144 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030da:	2302      	movs	r3, #2
 80030dc:	e033      	b.n	8003146 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2224      	movs	r2, #36	; 0x24
 80030ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0201 	bic.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800310c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	e000      	b.n	8003146 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003144:	2302      	movs	r3, #2
  }
}
 8003146:	4618      	mov	r0, r3
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <HAL_PWREx_GetVoltageRange+0x18>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40007000 	.word	0x40007000

08003170 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800317e:	d130      	bne.n	80031e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003180:	4b23      	ldr	r3, [pc, #140]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800318c:	d038      	beq.n	8003200 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800318e:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003196:	4a1e      	ldr	r2, [pc, #120]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003198:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800319c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800319e:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2232      	movs	r2, #50	; 0x32
 80031a4:	fb02 f303 	mul.w	r3, r2, r3
 80031a8:	4a1b      	ldr	r2, [pc, #108]	; (8003218 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	0c9b      	lsrs	r3, r3, #18
 80031b0:	3301      	adds	r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031b4:	e002      	b.n	80031bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031bc:	4b14      	ldr	r3, [pc, #80]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c8:	d102      	bne.n	80031d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f2      	bne.n	80031b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031d0:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031dc:	d110      	bne.n	8003200 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e00f      	b.n	8003202 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ee:	d007      	beq.n	8003200 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031f0:	4b07      	ldr	r3, [pc, #28]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031f8:	4a05      	ldr	r2, [pc, #20]	; (8003210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40007000 	.word	0x40007000
 8003214:	20000000 	.word	0x20000000
 8003218:	431bde83 	.word	0x431bde83

0800321c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e3ca      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800322e:	4b97      	ldr	r3, [pc, #604]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
 8003236:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003238:	4b94      	ldr	r3, [pc, #592]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80e4 	beq.w	8003418 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <HAL_RCC_OscConfig+0x4a>
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	2b0c      	cmp	r3, #12
 800325a:	f040 808b 	bne.w	8003374 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b01      	cmp	r3, #1
 8003262:	f040 8087 	bne.w	8003374 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003266:	4b89      	ldr	r3, [pc, #548]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_RCC_OscConfig+0x62>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e3a2      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1a      	ldr	r2, [r3, #32]
 8003282:	4b82      	ldr	r3, [pc, #520]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d004      	beq.n	8003298 <HAL_RCC_OscConfig+0x7c>
 800328e:	4b7f      	ldr	r3, [pc, #508]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003296:	e005      	b.n	80032a4 <HAL_RCC_OscConfig+0x88>
 8003298:	4b7c      	ldr	r3, [pc, #496]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800329a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d223      	bcs.n	80032f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fd55 	bl	8003d5c <RCC_SetFlashLatencyFromMSIRange>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e383      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032bc:	4b73      	ldr	r3, [pc, #460]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a72      	ldr	r2, [pc, #456]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032c2:	f043 0308 	orr.w	r3, r3, #8
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	4b70      	ldr	r3, [pc, #448]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	496d      	ldr	r1, [pc, #436]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032da:	4b6c      	ldr	r3, [pc, #432]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	4968      	ldr	r1, [pc, #416]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
 80032ee:	e025      	b.n	800333c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032f0:	4b66      	ldr	r3, [pc, #408]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a65      	ldr	r2, [pc, #404]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032f6:	f043 0308 	orr.w	r3, r3, #8
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b63      	ldr	r3, [pc, #396]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	4960      	ldr	r1, [pc, #384]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800330e:	4b5f      	ldr	r3, [pc, #380]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	495b      	ldr	r1, [pc, #364]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800331e:	4313      	orrs	r3, r2
 8003320:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fd15 	bl	8003d5c <RCC_SetFlashLatencyFromMSIRange>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e343      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800333c:	f000 fc4a 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003340:	4602      	mov	r2, r0
 8003342:	4b52      	ldr	r3, [pc, #328]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	4950      	ldr	r1, [pc, #320]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 800334e:	5ccb      	ldrb	r3, [r1, r3]
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
 8003358:	4a4e      	ldr	r2, [pc, #312]	; (8003494 <HAL_RCC_OscConfig+0x278>)
 800335a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800335c:	4b4e      	ldr	r3, [pc, #312]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd fe19 	bl	8000f98 <HAL_InitTick>
 8003366:	4603      	mov	r3, r0
 8003368:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d052      	beq.n	8003416 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	e327      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d032      	beq.n	80033e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800337c:	4b43      	ldr	r3, [pc, #268]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a42      	ldr	r2, [pc, #264]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003388:	f7fd fe56 	bl	8001038 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003390:	f7fd fe52 	bl	8001038 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e310      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033a2:	4b3a      	ldr	r3, [pc, #232]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ae:	4b37      	ldr	r3, [pc, #220]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a36      	ldr	r2, [pc, #216]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80033b4:	f043 0308 	orr.w	r3, r3, #8
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b34      	ldr	r3, [pc, #208]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4931      	ldr	r1, [pc, #196]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033cc:	4b2f      	ldr	r3, [pc, #188]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	021b      	lsls	r3, r3, #8
 80033da:	492c      	ldr	r1, [pc, #176]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
 80033e0:	e01a      	b.n	8003418 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033e2:	4b2a      	ldr	r3, [pc, #168]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a29      	ldr	r2, [pc, #164]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033ee:	f7fd fe23 	bl	8001038 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033f6:	f7fd fe1f 	bl	8001038 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e2dd      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003408:	4b20      	ldr	r3, [pc, #128]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f0      	bne.n	80033f6 <HAL_RCC_OscConfig+0x1da>
 8003414:	e000      	b.n	8003418 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003416:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d074      	beq.n	800350e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2b08      	cmp	r3, #8
 8003428:	d005      	beq.n	8003436 <HAL_RCC_OscConfig+0x21a>
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2b0c      	cmp	r3, #12
 800342e:	d10e      	bne.n	800344e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2b03      	cmp	r3, #3
 8003434:	d10b      	bne.n	800344e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d064      	beq.n	800350c <HAL_RCC_OscConfig+0x2f0>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d160      	bne.n	800350c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e2ba      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003456:	d106      	bne.n	8003466 <HAL_RCC_OscConfig+0x24a>
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a0b      	ldr	r2, [pc, #44]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800345e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	e026      	b.n	80034b4 <HAL_RCC_OscConfig+0x298>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800346e:	d115      	bne.n	800349c <HAL_RCC_OscConfig+0x280>
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a05      	ldr	r2, [pc, #20]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003476:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a02      	ldr	r2, [pc, #8]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	e014      	b.n	80034b4 <HAL_RCC_OscConfig+0x298>
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	080067a4 	.word	0x080067a4
 8003494:	20000000 	.word	0x20000000
 8003498:	20000004 	.word	0x20000004
 800349c:	4ba0      	ldr	r3, [pc, #640]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a9f      	ldr	r2, [pc, #636]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 80034a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	4b9d      	ldr	r3, [pc, #628]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a9c      	ldr	r2, [pc, #624]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 80034ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d013      	beq.n	80034e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fd fdbc 	bl	8001038 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c4:	f7fd fdb8 	bl	8001038 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e276      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034d6:	4b92      	ldr	r3, [pc, #584]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x2a8>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fd fda8 	bl	8001038 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fd fda4 	bl	8001038 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e262      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034fe:	4b88      	ldr	r3, [pc, #544]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x2d0>
 800350a:	e000      	b.n	800350e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d060      	beq.n	80035dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2b04      	cmp	r3, #4
 800351e:	d005      	beq.n	800352c <HAL_RCC_OscConfig+0x310>
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	2b0c      	cmp	r3, #12
 8003524:	d119      	bne.n	800355a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b02      	cmp	r3, #2
 800352a:	d116      	bne.n	800355a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800352c:	4b7c      	ldr	r3, [pc, #496]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_OscConfig+0x328>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e23f      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003544:	4b76      	ldr	r3, [pc, #472]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	061b      	lsls	r3, r3, #24
 8003552:	4973      	ldr	r1, [pc, #460]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 8003554:	4313      	orrs	r3, r2
 8003556:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003558:	e040      	b.n	80035dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d023      	beq.n	80035aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003562:	4b6f      	ldr	r3, [pc, #444]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a6e      	ldr	r2, [pc, #440]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 8003568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356e:	f7fd fd63 	bl	8001038 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003576:	f7fd fd5f 	bl	8001038 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e21d      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003588:	4b65      	ldr	r3, [pc, #404]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003594:	4b62      	ldr	r3, [pc, #392]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	061b      	lsls	r3, r3, #24
 80035a2:	495f      	ldr	r1, [pc, #380]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]
 80035a8:	e018      	b.n	80035dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035aa:	4b5d      	ldr	r3, [pc, #372]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a5c      	ldr	r2, [pc, #368]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 80035b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b6:	f7fd fd3f 	bl	8001038 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035be:	f7fd fd3b 	bl	8001038 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e1f9      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035d0:	4b53      	ldr	r3, [pc, #332]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f0      	bne.n	80035be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d03c      	beq.n	8003662 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01c      	beq.n	800362a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f0:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 80035f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035f6:	4a4a      	ldr	r2, [pc, #296]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fd fd1a 	bl	8001038 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003608:	f7fd fd16 	bl	8001038 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e1d4      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800361a:	4b41      	ldr	r3, [pc, #260]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 800361c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ef      	beq.n	8003608 <HAL_RCC_OscConfig+0x3ec>
 8003628:	e01b      	b.n	8003662 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800362a:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 800362c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003630:	4a3b      	ldr	r2, [pc, #236]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 8003632:	f023 0301 	bic.w	r3, r3, #1
 8003636:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363a:	f7fd fcfd 	bl	8001038 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003642:	f7fd fcf9 	bl	8001038 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e1b7      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003654:	4b32      	ldr	r3, [pc, #200]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 8003656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1ef      	bne.n	8003642 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80a6 	beq.w	80037bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003670:	2300      	movs	r3, #0
 8003672:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003674:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10d      	bne.n	800369c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003680:	4b27      	ldr	r3, [pc, #156]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003684:	4a26      	ldr	r2, [pc, #152]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 8003686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368a:	6593      	str	r3, [r2, #88]	; 0x58
 800368c:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003698:	2301      	movs	r3, #1
 800369a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800369c:	4b21      	ldr	r3, [pc, #132]	; (8003724 <HAL_RCC_OscConfig+0x508>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d118      	bne.n	80036da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a8:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <HAL_RCC_OscConfig+0x508>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1d      	ldr	r2, [pc, #116]	; (8003724 <HAL_RCC_OscConfig+0x508>)
 80036ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b4:	f7fd fcc0 	bl	8001038 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036bc:	f7fd fcbc 	bl	8001038 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e17a      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_RCC_OscConfig+0x508>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d108      	bne.n	80036f4 <HAL_RCC_OscConfig+0x4d8>
 80036e2:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e8:	4a0d      	ldr	r2, [pc, #52]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036f2:	e029      	b.n	8003748 <HAL_RCC_OscConfig+0x52c>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b05      	cmp	r3, #5
 80036fa:	d115      	bne.n	8003728 <HAL_RCC_OscConfig+0x50c>
 80036fc:	4b08      	ldr	r3, [pc, #32]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	4a07      	ldr	r2, [pc, #28]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 8003704:	f043 0304 	orr.w	r3, r3, #4
 8003708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	4a03      	ldr	r2, [pc, #12]	; (8003720 <HAL_RCC_OscConfig+0x504>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800371c:	e014      	b.n	8003748 <HAL_RCC_OscConfig+0x52c>
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000
 8003724:	40007000 	.word	0x40007000
 8003728:	4b9c      	ldr	r3, [pc, #624]	; (800399c <HAL_RCC_OscConfig+0x780>)
 800372a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372e:	4a9b      	ldr	r2, [pc, #620]	; (800399c <HAL_RCC_OscConfig+0x780>)
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003738:	4b98      	ldr	r3, [pc, #608]	; (800399c <HAL_RCC_OscConfig+0x780>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	4a97      	ldr	r2, [pc, #604]	; (800399c <HAL_RCC_OscConfig+0x780>)
 8003740:	f023 0304 	bic.w	r3, r3, #4
 8003744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d016      	beq.n	800377e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fd fc72 	bl	8001038 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003756:	e00a      	b.n	800376e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003758:	f7fd fc6e 	bl	8001038 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	; 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e12a      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376e:	4b8b      	ldr	r3, [pc, #556]	; (800399c <HAL_RCC_OscConfig+0x780>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0ed      	beq.n	8003758 <HAL_RCC_OscConfig+0x53c>
 800377c:	e015      	b.n	80037aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377e:	f7fd fc5b 	bl	8001038 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003784:	e00a      	b.n	800379c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7fd fc57 	bl	8001038 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	; 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e113      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800379c:	4b7f      	ldr	r3, [pc, #508]	; (800399c <HAL_RCC_OscConfig+0x780>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1ed      	bne.n	8003786 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037aa:	7ffb      	ldrb	r3, [r7, #31]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d105      	bne.n	80037bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b0:	4b7a      	ldr	r3, [pc, #488]	; (800399c <HAL_RCC_OscConfig+0x780>)
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	4a79      	ldr	r2, [pc, #484]	; (800399c <HAL_RCC_OscConfig+0x780>)
 80037b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80fe 	beq.w	80039c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	f040 80d0 	bne.w	8003970 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037d0:	4b72      	ldr	r3, [pc, #456]	; (800399c <HAL_RCC_OscConfig+0x780>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f003 0203 	and.w	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d130      	bne.n	8003846 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	3b01      	subs	r3, #1
 80037f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d127      	bne.n	8003846 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003800:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d11f      	bne.n	8003846 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003810:	2a07      	cmp	r2, #7
 8003812:	bf14      	ite	ne
 8003814:	2201      	movne	r2, #1
 8003816:	2200      	moveq	r2, #0
 8003818:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800381a:	4293      	cmp	r3, r2
 800381c:	d113      	bne.n	8003846 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	3b01      	subs	r3, #1
 800382c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d109      	bne.n	8003846 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	3b01      	subs	r3, #1
 8003840:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d06e      	beq.n	8003924 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	2b0c      	cmp	r3, #12
 800384a:	d069      	beq.n	8003920 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800384c:	4b53      	ldr	r3, [pc, #332]	; (800399c <HAL_RCC_OscConfig+0x780>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d105      	bne.n	8003864 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003858:	4b50      	ldr	r3, [pc, #320]	; (800399c <HAL_RCC_OscConfig+0x780>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0ad      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003868:	4b4c      	ldr	r3, [pc, #304]	; (800399c <HAL_RCC_OscConfig+0x780>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a4b      	ldr	r2, [pc, #300]	; (800399c <HAL_RCC_OscConfig+0x780>)
 800386e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003872:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003874:	f7fd fbe0 	bl	8001038 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387c:	f7fd fbdc 	bl	8001038 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e09a      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800388e:	4b43      	ldr	r3, [pc, #268]	; (800399c <HAL_RCC_OscConfig+0x780>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800389a:	4b40      	ldr	r3, [pc, #256]	; (800399c <HAL_RCC_OscConfig+0x780>)
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	4b40      	ldr	r3, [pc, #256]	; (80039a0 <HAL_RCC_OscConfig+0x784>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038aa:	3a01      	subs	r2, #1
 80038ac:	0112      	lsls	r2, r2, #4
 80038ae:	4311      	orrs	r1, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038b4:	0212      	lsls	r2, r2, #8
 80038b6:	4311      	orrs	r1, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038bc:	0852      	lsrs	r2, r2, #1
 80038be:	3a01      	subs	r2, #1
 80038c0:	0552      	lsls	r2, r2, #21
 80038c2:	4311      	orrs	r1, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038c8:	0852      	lsrs	r2, r2, #1
 80038ca:	3a01      	subs	r2, #1
 80038cc:	0652      	lsls	r2, r2, #25
 80038ce:	4311      	orrs	r1, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038d4:	0912      	lsrs	r2, r2, #4
 80038d6:	0452      	lsls	r2, r2, #17
 80038d8:	430a      	orrs	r2, r1
 80038da:	4930      	ldr	r1, [pc, #192]	; (800399c <HAL_RCC_OscConfig+0x780>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038e0:	4b2e      	ldr	r3, [pc, #184]	; (800399c <HAL_RCC_OscConfig+0x780>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2d      	ldr	r2, [pc, #180]	; (800399c <HAL_RCC_OscConfig+0x780>)
 80038e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038ec:	4b2b      	ldr	r3, [pc, #172]	; (800399c <HAL_RCC_OscConfig+0x780>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4a2a      	ldr	r2, [pc, #168]	; (800399c <HAL_RCC_OscConfig+0x780>)
 80038f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038f8:	f7fd fb9e 	bl	8001038 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003900:	f7fd fb9a 	bl	8001038 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e058      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003912:	4b22      	ldr	r3, [pc, #136]	; (800399c <HAL_RCC_OscConfig+0x780>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800391e:	e050      	b.n	80039c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e04f      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003924:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_RCC_OscConfig+0x780>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d148      	bne.n	80039c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003930:	4b1a      	ldr	r3, [pc, #104]	; (800399c <HAL_RCC_OscConfig+0x780>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a19      	ldr	r2, [pc, #100]	; (800399c <HAL_RCC_OscConfig+0x780>)
 8003936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800393a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800393c:	4b17      	ldr	r3, [pc, #92]	; (800399c <HAL_RCC_OscConfig+0x780>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4a16      	ldr	r2, [pc, #88]	; (800399c <HAL_RCC_OscConfig+0x780>)
 8003942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003946:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003948:	f7fd fb76 	bl	8001038 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003950:	f7fd fb72 	bl	8001038 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e030      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003962:	4b0e      	ldr	r3, [pc, #56]	; (800399c <HAL_RCC_OscConfig+0x780>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0f0      	beq.n	8003950 <HAL_RCC_OscConfig+0x734>
 800396e:	e028      	b.n	80039c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	2b0c      	cmp	r3, #12
 8003974:	d023      	beq.n	80039be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <HAL_RCC_OscConfig+0x780>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a08      	ldr	r2, [pc, #32]	; (800399c <HAL_RCC_OscConfig+0x780>)
 800397c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003982:	f7fd fb59 	bl	8001038 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003988:	e00c      	b.n	80039a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398a:	f7fd fb55 	bl	8001038 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d905      	bls.n	80039a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e013      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
 800399c:	40021000 	.word	0x40021000
 80039a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a4:	4b09      	ldr	r3, [pc, #36]	; (80039cc <HAL_RCC_OscConfig+0x7b0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ec      	bne.n	800398a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_RCC_OscConfig+0x7b0>)
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	4905      	ldr	r1, [pc, #20]	; (80039cc <HAL_RCC_OscConfig+0x7b0>)
 80039b6:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <HAL_RCC_OscConfig+0x7b4>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	60cb      	str	r3, [r1, #12]
 80039bc:	e001      	b.n	80039c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3720      	adds	r7, #32
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40021000 	.word	0x40021000
 80039d0:	feeefffc 	.word	0xfeeefffc

080039d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0e7      	b.n	8003bb8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e8:	4b75      	ldr	r3, [pc, #468]	; (8003bc0 <HAL_RCC_ClockConfig+0x1ec>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d910      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b72      	ldr	r3, [pc, #456]	; (8003bc0 <HAL_RCC_ClockConfig+0x1ec>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 0207 	bic.w	r2, r3, #7
 80039fe:	4970      	ldr	r1, [pc, #448]	; (8003bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b6e      	ldr	r3, [pc, #440]	; (8003bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0cf      	b.n	8003bb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d010      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	4b66      	ldr	r3, [pc, #408]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d908      	bls.n	8003a46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a34:	4b63      	ldr	r3, [pc, #396]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4960      	ldr	r1, [pc, #384]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d04c      	beq.n	8003aec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a5a:	4b5a      	ldr	r3, [pc, #360]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d121      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e0a6      	b.n	8003bb8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a72:	4b54      	ldr	r3, [pc, #336]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d115      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e09a      	b.n	8003bb8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a8a:	4b4e      	ldr	r3, [pc, #312]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e08e      	b.n	8003bb8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a9a:	4b4a      	ldr	r3, [pc, #296]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e086      	b.n	8003bb8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aaa:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f023 0203 	bic.w	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4943      	ldr	r1, [pc, #268]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003abc:	f7fd fabc 	bl	8001038 <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac4:	f7fd fab8 	bl	8001038 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e06e      	b.n	8003bb8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	4b3a      	ldr	r3, [pc, #232]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 020c 	and.w	r2, r3, #12
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d1eb      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d010      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d208      	bcs.n	8003b1a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b08:	4b2e      	ldr	r3, [pc, #184]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	492b      	ldr	r1, [pc, #172]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b1a:	4b29      	ldr	r3, [pc, #164]	; (8003bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d210      	bcs.n	8003b4a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b28:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f023 0207 	bic.w	r2, r3, #7
 8003b30:	4923      	ldr	r1, [pc, #140]	; (8003bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b38:	4b21      	ldr	r3, [pc, #132]	; (8003bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d001      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e036      	b.n	8003bb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d008      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b56:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	4918      	ldr	r1, [pc, #96]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d009      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b74:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4910      	ldr	r1, [pc, #64]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b88:	f000 f824 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	490b      	ldr	r1, [pc, #44]	; (8003bc8 <HAL_RCC_ClockConfig+0x1f4>)
 8003b9a:	5ccb      	ldrb	r3, [r1, r3]
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba4:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x1f8>)
 8003ba6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_ClockConfig+0x1fc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fd f9f3 	bl	8000f98 <HAL_InitTick>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bb6:	7afb      	ldrb	r3, [r7, #11]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40022000 	.word	0x40022000
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	080067a4 	.word	0x080067a4
 8003bcc:	20000000 	.word	0x20000000
 8003bd0:	20000004 	.word	0x20000004

08003bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b089      	sub	sp, #36	; 0x24
 8003bd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	2300      	movs	r3, #0
 8003be0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003be2:	4b3e      	ldr	r3, [pc, #248]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bec:	4b3b      	ldr	r3, [pc, #236]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x34>
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	2b0c      	cmp	r3, #12
 8003c00:	d121      	bne.n	8003c46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d11e      	bne.n	8003c46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c08:	4b34      	ldr	r3, [pc, #208]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d107      	bne.n	8003c24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c14:	4b31      	ldr	r3, [pc, #196]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	e005      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c24:	4b2d      	ldr	r3, [pc, #180]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	091b      	lsrs	r3, r3, #4
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c30:	4a2b      	ldr	r2, [pc, #172]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10d      	bne.n	8003c5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c44:	e00a      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d102      	bne.n	8003c52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c4c:	4b25      	ldr	r3, [pc, #148]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	e004      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d101      	bne.n	8003c5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c58:	4b23      	ldr	r3, [pc, #140]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2b0c      	cmp	r3, #12
 8003c60:	d134      	bne.n	8003ccc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c62:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d003      	beq.n	8003c7a <HAL_RCC_GetSysClockFreq+0xa6>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d003      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0xac>
 8003c78:	e005      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c7c:	617b      	str	r3, [r7, #20]
      break;
 8003c7e:	e005      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c80:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c82:	617b      	str	r3, [r7, #20]
      break;
 8003c84:	e002      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	617b      	str	r3, [r7, #20]
      break;
 8003c8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c8c:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	3301      	adds	r3, #1
 8003c98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	fb03 f202 	mul.w	r2, r3, r2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	0e5b      	lsrs	r3, r3, #25
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ccc:	69bb      	ldr	r3, [r7, #24]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3724      	adds	r7, #36	; 0x24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	080067bc 	.word	0x080067bc
 8003ce4:	00f42400 	.word	0x00f42400
 8003ce8:	007a1200 	.word	0x007a1200

08003cec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000000 	.word	0x20000000

08003d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d08:	f7ff fff0 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	4904      	ldr	r1, [pc, #16]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d1a:	5ccb      	ldrb	r3, [r1, r3]
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	080067b4 	.word	0x080067b4

08003d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d34:	f7ff ffda 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	0adb      	lsrs	r3, r3, #11
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	4904      	ldr	r1, [pc, #16]	; (8003d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d46:	5ccb      	ldrb	r3, [r1, r3]
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40021000 	.word	0x40021000
 8003d58:	080067b4 	.word	0x080067b4

08003d5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d64:	2300      	movs	r3, #0
 8003d66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d68:	4b2a      	ldr	r3, [pc, #168]	; (8003e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d74:	f7ff f9ee 	bl	8003154 <HAL_PWREx_GetVoltageRange>
 8003d78:	6178      	str	r0, [r7, #20]
 8003d7a:	e014      	b.n	8003da6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	4a24      	ldr	r2, [pc, #144]	; (8003e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d86:	6593      	str	r3, [r2, #88]	; 0x58
 8003d88:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d94:	f7ff f9de 	bl	8003154 <HAL_PWREx_GetVoltageRange>
 8003d98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d9a:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dac:	d10b      	bne.n	8003dc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b80      	cmp	r3, #128	; 0x80
 8003db2:	d919      	bls.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2ba0      	cmp	r3, #160	; 0xa0
 8003db8:	d902      	bls.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dba:	2302      	movs	r3, #2
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	e013      	b.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	e010      	b.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b80      	cmp	r3, #128	; 0x80
 8003dca:	d902      	bls.n	8003dd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003dcc:	2303      	movs	r3, #3
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	e00a      	b.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b80      	cmp	r3, #128	; 0x80
 8003dd6:	d102      	bne.n	8003dde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dd8:	2302      	movs	r3, #2
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	e004      	b.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b70      	cmp	r3, #112	; 0x70
 8003de2:	d101      	bne.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003de4:	2301      	movs	r3, #1
 8003de6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f023 0207 	bic.w	r2, r3, #7
 8003df0:	4909      	ldr	r1, [pc, #36]	; (8003e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003df8:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d001      	beq.n	8003e0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40022000 	.word	0x40022000

08003e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e24:	2300      	movs	r3, #0
 8003e26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e28:	2300      	movs	r3, #0
 8003e2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d041      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e40:	d02a      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e46:	d824      	bhi.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e4c:	d008      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e52:	d81e      	bhi.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e5c:	d010      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e5e:	e018      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e60:	4b86      	ldr	r3, [pc, #536]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4a85      	ldr	r2, [pc, #532]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e6c:	e015      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	3304      	adds	r3, #4
 8003e72:	2100      	movs	r1, #0
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fabb 	bl	80043f0 <RCCEx_PLLSAI1_Config>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e7e:	e00c      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3320      	adds	r3, #32
 8003e84:	2100      	movs	r1, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fba6 	bl	80045d8 <RCCEx_PLLSAI2_Config>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e90:	e003      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	74fb      	strb	r3, [r7, #19]
      break;
 8003e96:	e000      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e9a:	7cfb      	ldrb	r3, [r7, #19]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ea0:	4b76      	ldr	r3, [pc, #472]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eae:	4973      	ldr	r1, [pc, #460]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003eb6:	e001      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d041      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ecc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ed0:	d02a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ed2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ed6:	d824      	bhi.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ed8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003edc:	d008      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ede:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ee2:	d81e      	bhi.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eec:	d010      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003eee:	e018      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ef0:	4b62      	ldr	r3, [pc, #392]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a61      	ldr	r2, [pc, #388]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003efc:	e015      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3304      	adds	r3, #4
 8003f02:	2100      	movs	r1, #0
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fa73 	bl	80043f0 <RCCEx_PLLSAI1_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f0e:	e00c      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3320      	adds	r3, #32
 8003f14:	2100      	movs	r1, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fb5e 	bl	80045d8 <RCCEx_PLLSAI2_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f20:	e003      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	74fb      	strb	r3, [r7, #19]
      break;
 8003f26:	e000      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f2a:	7cfb      	ldrb	r3, [r7, #19]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10b      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f30:	4b52      	ldr	r3, [pc, #328]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f3e:	494f      	ldr	r1, [pc, #316]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f46:	e001      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f48:	7cfb      	ldrb	r3, [r7, #19]
 8003f4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80a0 	beq.w	800409a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f5e:	4b47      	ldr	r3, [pc, #284]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00d      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f74:	4b41      	ldr	r3, [pc, #260]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f78:	4a40      	ldr	r2, [pc, #256]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f80:	4b3e      	ldr	r3, [pc, #248]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f90:	4b3b      	ldr	r3, [pc, #236]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a3a      	ldr	r2, [pc, #232]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f9c:	f7fd f84c 	bl	8001038 <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fa2:	e009      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa4:	f7fd f848 	bl	8001038 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d902      	bls.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	74fb      	strb	r3, [r7, #19]
        break;
 8003fb6:	e005      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fb8:	4b31      	ldr	r3, [pc, #196]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0ef      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d15c      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fca:	4b2c      	ldr	r3, [pc, #176]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01f      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d019      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fe8:	4b24      	ldr	r3, [pc, #144]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ff4:	4b21      	ldr	r3, [pc, #132]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffa:	4a20      	ldr	r2, [pc, #128]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004004:	4b1d      	ldr	r3, [pc, #116]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	4a1c      	ldr	r2, [pc, #112]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004014:	4a19      	ldr	r2, [pc, #100]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d016      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004026:	f7fd f807 	bl	8001038 <HAL_GetTick>
 800402a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800402c:	e00b      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402e:	f7fd f803 	bl	8001038 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f241 3288 	movw	r2, #5000	; 0x1388
 800403c:	4293      	cmp	r3, r2
 800403e:	d902      	bls.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	74fb      	strb	r3, [r7, #19]
            break;
 8004044:	e006      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004046:	4b0d      	ldr	r3, [pc, #52]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ec      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004054:	7cfb      	ldrb	r3, [r7, #19]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10c      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800405a:	4b08      	ldr	r3, [pc, #32]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800406a:	4904      	ldr	r1, [pc, #16]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004072:	e009      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	74bb      	strb	r3, [r7, #18]
 8004078:	e006      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800407a:	bf00      	nop
 800407c:	40021000 	.word	0x40021000
 8004080:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004088:	7c7b      	ldrb	r3, [r7, #17]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d105      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408e:	4b9e      	ldr	r3, [pc, #632]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004092:	4a9d      	ldr	r2, [pc, #628]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004098:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040a6:	4b98      	ldr	r3, [pc, #608]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ac:	f023 0203 	bic.w	r2, r3, #3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	4994      	ldr	r1, [pc, #592]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040c8:	4b8f      	ldr	r3, [pc, #572]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ce:	f023 020c 	bic.w	r2, r3, #12
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	498c      	ldr	r1, [pc, #560]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ea:	4b87      	ldr	r3, [pc, #540]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	4983      	ldr	r1, [pc, #524]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800410c:	4b7e      	ldr	r3, [pc, #504]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	497b      	ldr	r1, [pc, #492]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800412e:	4b76      	ldr	r3, [pc, #472]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413c:	4972      	ldr	r1, [pc, #456]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004150:	4b6d      	ldr	r3, [pc, #436]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415e:	496a      	ldr	r1, [pc, #424]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004172:	4b65      	ldr	r3, [pc, #404]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004180:	4961      	ldr	r1, [pc, #388]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004194:	4b5c      	ldr	r3, [pc, #368]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a2:	4959      	ldr	r1, [pc, #356]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041b6:	4b54      	ldr	r3, [pc, #336]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c4:	4950      	ldr	r1, [pc, #320]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041d8:	4b4b      	ldr	r3, [pc, #300]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	4948      	ldr	r1, [pc, #288]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041fa:	4b43      	ldr	r3, [pc, #268]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004208:	493f      	ldr	r1, [pc, #252]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d028      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800421c:	4b3a      	ldr	r3, [pc, #232]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800422a:	4937      	ldr	r1, [pc, #220]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423a:	d106      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800423c:	4b32      	ldr	r3, [pc, #200]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4a31      	ldr	r2, [pc, #196]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004246:	60d3      	str	r3, [r2, #12]
 8004248:	e011      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800424e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004252:	d10c      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3304      	adds	r3, #4
 8004258:	2101      	movs	r1, #1
 800425a:	4618      	mov	r0, r3
 800425c:	f000 f8c8 	bl	80043f0 <RCCEx_PLLSAI1_Config>
 8004260:	4603      	mov	r3, r0
 8004262:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800426a:	7cfb      	ldrb	r3, [r7, #19]
 800426c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d028      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800427a:	4b23      	ldr	r3, [pc, #140]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004280:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	491f      	ldr	r1, [pc, #124]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004298:	d106      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	4a1a      	ldr	r2, [pc, #104]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042a4:	60d3      	str	r3, [r2, #12]
 80042a6:	e011      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042b0:	d10c      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3304      	adds	r3, #4
 80042b6:	2101      	movs	r1, #1
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 f899 	bl	80043f0 <RCCEx_PLLSAI1_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042c2:	7cfb      	ldrb	r3, [r7, #19]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80042c8:	7cfb      	ldrb	r3, [r7, #19]
 80042ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d02b      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e6:	4908      	ldr	r1, [pc, #32]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042f6:	d109      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a02      	ldr	r2, [pc, #8]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004302:	60d3      	str	r3, [r2, #12]
 8004304:	e014      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004314:	d10c      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3304      	adds	r3, #4
 800431a:	2101      	movs	r1, #1
 800431c:	4618      	mov	r0, r3
 800431e:	f000 f867 	bl	80043f0 <RCCEx_PLLSAI1_Config>
 8004322:	4603      	mov	r3, r0
 8004324:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004326:	7cfb      	ldrb	r3, [r7, #19]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800432c:	7cfb      	ldrb	r3, [r7, #19]
 800432e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d02f      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800433c:	4b2b      	ldr	r3, [pc, #172]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004342:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800434a:	4928      	ldr	r1, [pc, #160]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800435a:	d10d      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3304      	adds	r3, #4
 8004360:	2102      	movs	r1, #2
 8004362:	4618      	mov	r0, r3
 8004364:	f000 f844 	bl	80043f0 <RCCEx_PLLSAI1_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800436c:	7cfb      	ldrb	r3, [r7, #19]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d014      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004372:	7cfb      	ldrb	r3, [r7, #19]
 8004374:	74bb      	strb	r3, [r7, #18]
 8004376:	e011      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800437c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004380:	d10c      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3320      	adds	r3, #32
 8004386:	2102      	movs	r1, #2
 8004388:	4618      	mov	r0, r3
 800438a:	f000 f925 	bl	80045d8 <RCCEx_PLLSAI2_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004392:	7cfb      	ldrb	r3, [r7, #19]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004398:	7cfb      	ldrb	r3, [r7, #19]
 800439a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043a8:	4b10      	ldr	r3, [pc, #64]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043b6:	490d      	ldr	r1, [pc, #52]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043ca:	4b08      	ldr	r3, [pc, #32]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043da:	4904      	ldr	r1, [pc, #16]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40021000 	.word	0x40021000

080043f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043fe:	4b75      	ldr	r3, [pc, #468]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d018      	beq.n	800443c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800440a:	4b72      	ldr	r3, [pc, #456]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0203 	and.w	r2, r3, #3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d10d      	bne.n	8004436 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
       ||
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004422:	4b6c      	ldr	r3, [pc, #432]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	091b      	lsrs	r3, r3, #4
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
       ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d047      	beq.n	80044c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
 800443a:	e044      	b.n	80044c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d018      	beq.n	8004476 <RCCEx_PLLSAI1_Config+0x86>
 8004444:	2b03      	cmp	r3, #3
 8004446:	d825      	bhi.n	8004494 <RCCEx_PLLSAI1_Config+0xa4>
 8004448:	2b01      	cmp	r3, #1
 800444a:	d002      	beq.n	8004452 <RCCEx_PLLSAI1_Config+0x62>
 800444c:	2b02      	cmp	r3, #2
 800444e:	d009      	beq.n	8004464 <RCCEx_PLLSAI1_Config+0x74>
 8004450:	e020      	b.n	8004494 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004452:	4b60      	ldr	r3, [pc, #384]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d11d      	bne.n	800449a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004462:	e01a      	b.n	800449a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004464:	4b5b      	ldr	r3, [pc, #364]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446c:	2b00      	cmp	r3, #0
 800446e:	d116      	bne.n	800449e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004474:	e013      	b.n	800449e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004476:	4b57      	ldr	r3, [pc, #348]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10f      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004482:	4b54      	ldr	r3, [pc, #336]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004492:	e006      	b.n	80044a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
      break;
 8004498:	e004      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800449a:	bf00      	nop
 800449c:	e002      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10d      	bne.n	80044c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044aa:	4b4a      	ldr	r3, [pc, #296]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6819      	ldr	r1, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	430b      	orrs	r3, r1
 80044c0:	4944      	ldr	r1, [pc, #272]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d17d      	bne.n	80045c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044cc:	4b41      	ldr	r3, [pc, #260]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a40      	ldr	r2, [pc, #256]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d8:	f7fc fdae 	bl	8001038 <HAL_GetTick>
 80044dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044de:	e009      	b.n	80044f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044e0:	f7fc fdaa 	bl	8001038 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d902      	bls.n	80044f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	73fb      	strb	r3, [r7, #15]
        break;
 80044f2:	e005      	b.n	8004500 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044f4:	4b37      	ldr	r3, [pc, #220]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1ef      	bne.n	80044e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d160      	bne.n	80045c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d111      	bne.n	8004530 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800450c:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6892      	ldr	r2, [r2, #8]
 800451c:	0211      	lsls	r1, r2, #8
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	68d2      	ldr	r2, [r2, #12]
 8004522:	0912      	lsrs	r2, r2, #4
 8004524:	0452      	lsls	r2, r2, #17
 8004526:	430a      	orrs	r2, r1
 8004528:	492a      	ldr	r1, [pc, #168]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800452a:	4313      	orrs	r3, r2
 800452c:	610b      	str	r3, [r1, #16]
 800452e:	e027      	b.n	8004580 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d112      	bne.n	800455c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004536:	4b27      	ldr	r3, [pc, #156]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800453e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6892      	ldr	r2, [r2, #8]
 8004546:	0211      	lsls	r1, r2, #8
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6912      	ldr	r2, [r2, #16]
 800454c:	0852      	lsrs	r2, r2, #1
 800454e:	3a01      	subs	r2, #1
 8004550:	0552      	lsls	r2, r2, #21
 8004552:	430a      	orrs	r2, r1
 8004554:	491f      	ldr	r1, [pc, #124]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004556:	4313      	orrs	r3, r2
 8004558:	610b      	str	r3, [r1, #16]
 800455a:	e011      	b.n	8004580 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800455c:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004564:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6892      	ldr	r2, [r2, #8]
 800456c:	0211      	lsls	r1, r2, #8
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6952      	ldr	r2, [r2, #20]
 8004572:	0852      	lsrs	r2, r2, #1
 8004574:	3a01      	subs	r2, #1
 8004576:	0652      	lsls	r2, r2, #25
 8004578:	430a      	orrs	r2, r1
 800457a:	4916      	ldr	r1, [pc, #88]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800457c:	4313      	orrs	r3, r2
 800457e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004580:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a13      	ldr	r2, [pc, #76]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004586:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800458a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458c:	f7fc fd54 	bl	8001038 <HAL_GetTick>
 8004590:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004592:	e009      	b.n	80045a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004594:	f7fc fd50 	bl	8001038 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d902      	bls.n	80045a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	73fb      	strb	r3, [r7, #15]
          break;
 80045a6:	e005      	b.n	80045b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045a8:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ef      	beq.n	8004594 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045ba:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	4904      	ldr	r1, [pc, #16]	; (80045d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40021000 	.word	0x40021000

080045d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045e6:	4b6a      	ldr	r3, [pc, #424]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d018      	beq.n	8004624 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045f2:	4b67      	ldr	r3, [pc, #412]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f003 0203 	and.w	r2, r3, #3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d10d      	bne.n	800461e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
       ||
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800460a:	4b61      	ldr	r3, [pc, #388]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	091b      	lsrs	r3, r3, #4
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
       ||
 800461a:	429a      	cmp	r2, r3
 800461c:	d047      	beq.n	80046ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
 8004622:	e044      	b.n	80046ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b03      	cmp	r3, #3
 800462a:	d018      	beq.n	800465e <RCCEx_PLLSAI2_Config+0x86>
 800462c:	2b03      	cmp	r3, #3
 800462e:	d825      	bhi.n	800467c <RCCEx_PLLSAI2_Config+0xa4>
 8004630:	2b01      	cmp	r3, #1
 8004632:	d002      	beq.n	800463a <RCCEx_PLLSAI2_Config+0x62>
 8004634:	2b02      	cmp	r3, #2
 8004636:	d009      	beq.n	800464c <RCCEx_PLLSAI2_Config+0x74>
 8004638:	e020      	b.n	800467c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800463a:	4b55      	ldr	r3, [pc, #340]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d11d      	bne.n	8004682 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800464a:	e01a      	b.n	8004682 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800464c:	4b50      	ldr	r3, [pc, #320]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004654:	2b00      	cmp	r3, #0
 8004656:	d116      	bne.n	8004686 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800465c:	e013      	b.n	8004686 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800465e:	4b4c      	ldr	r3, [pc, #304]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10f      	bne.n	800468a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800466a:	4b49      	ldr	r3, [pc, #292]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d109      	bne.n	800468a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800467a:	e006      	b.n	800468a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
      break;
 8004680:	e004      	b.n	800468c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004682:	bf00      	nop
 8004684:	e002      	b.n	800468c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004686:	bf00      	nop
 8004688:	e000      	b.n	800468c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800468a:	bf00      	nop
    }

    if(status == HAL_OK)
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10d      	bne.n	80046ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004692:	4b3f      	ldr	r3, [pc, #252]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6819      	ldr	r1, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	430b      	orrs	r3, r1
 80046a8:	4939      	ldr	r1, [pc, #228]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d167      	bne.n	8004784 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046b4:	4b36      	ldr	r3, [pc, #216]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a35      	ldr	r2, [pc, #212]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c0:	f7fc fcba 	bl	8001038 <HAL_GetTick>
 80046c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046c6:	e009      	b.n	80046dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046c8:	f7fc fcb6 	bl	8001038 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d902      	bls.n	80046dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	73fb      	strb	r3, [r7, #15]
        break;
 80046da:	e005      	b.n	80046e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046dc:	4b2c      	ldr	r3, [pc, #176]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1ef      	bne.n	80046c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d14a      	bne.n	8004784 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d111      	bne.n	8004718 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046f4:	4b26      	ldr	r3, [pc, #152]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6892      	ldr	r2, [r2, #8]
 8004704:	0211      	lsls	r1, r2, #8
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	68d2      	ldr	r2, [r2, #12]
 800470a:	0912      	lsrs	r2, r2, #4
 800470c:	0452      	lsls	r2, r2, #17
 800470e:	430a      	orrs	r2, r1
 8004710:	491f      	ldr	r1, [pc, #124]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004712:	4313      	orrs	r3, r2
 8004714:	614b      	str	r3, [r1, #20]
 8004716:	e011      	b.n	800473c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004718:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004720:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6892      	ldr	r2, [r2, #8]
 8004728:	0211      	lsls	r1, r2, #8
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6912      	ldr	r2, [r2, #16]
 800472e:	0852      	lsrs	r2, r2, #1
 8004730:	3a01      	subs	r2, #1
 8004732:	0652      	lsls	r2, r2, #25
 8004734:	430a      	orrs	r2, r1
 8004736:	4916      	ldr	r1, [pc, #88]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004738:	4313      	orrs	r3, r2
 800473a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800473c:	4b14      	ldr	r3, [pc, #80]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a13      	ldr	r2, [pc, #76]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7fc fc76 	bl	8001038 <HAL_GetTick>
 800474c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800474e:	e009      	b.n	8004764 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004750:	f7fc fc72 	bl	8001038 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d902      	bls.n	8004764 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	73fb      	strb	r3, [r7, #15]
          break;
 8004762:	e005      	b.n	8004770 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004764:	4b0a      	ldr	r3, [pc, #40]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0ef      	beq.n	8004750 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	4904      	ldr	r1, [pc, #16]	; (8004790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004780:	4313      	orrs	r3, r2
 8004782:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000

08004794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e049      	b.n	800483a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fc fa04 	bl	8000bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f000 f960 	bl	8004a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01b      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f06f 0202 	mvn.w	r2, #2
 8004876:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f003 0303 	and.w	r3, r3, #3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f8e4 	bl	8004a5a <HAL_TIM_IC_CaptureCallback>
 8004892:	e005      	b.n	80048a0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f8d6 	bl	8004a46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f8e7 	bl	8004a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d020      	beq.n	80048f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01b      	beq.n	80048f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f06f 0204 	mvn.w	r2, #4
 80048c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f8be 	bl	8004a5a <HAL_TIM_IC_CaptureCallback>
 80048de:	e005      	b.n	80048ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f8b0 	bl	8004a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f8c1 	bl	8004a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d020      	beq.n	800493e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01b      	beq.n	800493e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f06f 0208 	mvn.w	r2, #8
 800490e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2204      	movs	r2, #4
 8004914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f898 	bl	8004a5a <HAL_TIM_IC_CaptureCallback>
 800492a:	e005      	b.n	8004938 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f88a 	bl	8004a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f89b 	bl	8004a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b00      	cmp	r3, #0
 8004946:	d020      	beq.n	800498a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	2b00      	cmp	r3, #0
 8004950:	d01b      	beq.n	800498a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f06f 0210 	mvn.w	r2, #16
 800495a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2208      	movs	r2, #8
 8004960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f872 	bl	8004a5a <HAL_TIM_IC_CaptureCallback>
 8004976:	e005      	b.n	8004984 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f864 	bl	8004a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f875 	bl	8004a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00c      	beq.n	80049ae <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f06f 0201 	mvn.w	r2, #1
 80049a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7fb ff13 	bl	80007d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00c      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f907 	bl	8004be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00c      	beq.n	80049f6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f8ff 	bl	8004bf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00c      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f834 	bl	8004a82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00c      	beq.n	8004a3e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d007      	beq.n	8004a3e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f06f 0220 	mvn.w	r2, #32
 8004a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f8c7 	bl	8004bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a3e:	bf00      	nop
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a40      	ldr	r2, [pc, #256]	; (8004bac <TIM_Base_SetConfig+0x114>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d013      	beq.n	8004ad8 <TIM_Base_SetConfig+0x40>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab6:	d00f      	beq.n	8004ad8 <TIM_Base_SetConfig+0x40>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a3d      	ldr	r2, [pc, #244]	; (8004bb0 <TIM_Base_SetConfig+0x118>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00b      	beq.n	8004ad8 <TIM_Base_SetConfig+0x40>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a3c      	ldr	r2, [pc, #240]	; (8004bb4 <TIM_Base_SetConfig+0x11c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d007      	beq.n	8004ad8 <TIM_Base_SetConfig+0x40>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a3b      	ldr	r2, [pc, #236]	; (8004bb8 <TIM_Base_SetConfig+0x120>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d003      	beq.n	8004ad8 <TIM_Base_SetConfig+0x40>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a3a      	ldr	r2, [pc, #232]	; (8004bbc <TIM_Base_SetConfig+0x124>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d108      	bne.n	8004aea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a2f      	ldr	r2, [pc, #188]	; (8004bac <TIM_Base_SetConfig+0x114>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d01f      	beq.n	8004b32 <TIM_Base_SetConfig+0x9a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af8:	d01b      	beq.n	8004b32 <TIM_Base_SetConfig+0x9a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a2c      	ldr	r2, [pc, #176]	; (8004bb0 <TIM_Base_SetConfig+0x118>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d017      	beq.n	8004b32 <TIM_Base_SetConfig+0x9a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a2b      	ldr	r2, [pc, #172]	; (8004bb4 <TIM_Base_SetConfig+0x11c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d013      	beq.n	8004b32 <TIM_Base_SetConfig+0x9a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a2a      	ldr	r2, [pc, #168]	; (8004bb8 <TIM_Base_SetConfig+0x120>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00f      	beq.n	8004b32 <TIM_Base_SetConfig+0x9a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a29      	ldr	r2, [pc, #164]	; (8004bbc <TIM_Base_SetConfig+0x124>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00b      	beq.n	8004b32 <TIM_Base_SetConfig+0x9a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a28      	ldr	r2, [pc, #160]	; (8004bc0 <TIM_Base_SetConfig+0x128>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d007      	beq.n	8004b32 <TIM_Base_SetConfig+0x9a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a27      	ldr	r2, [pc, #156]	; (8004bc4 <TIM_Base_SetConfig+0x12c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d003      	beq.n	8004b32 <TIM_Base_SetConfig+0x9a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a26      	ldr	r2, [pc, #152]	; (8004bc8 <TIM_Base_SetConfig+0x130>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d108      	bne.n	8004b44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a10      	ldr	r2, [pc, #64]	; (8004bac <TIM_Base_SetConfig+0x114>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00f      	beq.n	8004b90 <TIM_Base_SetConfig+0xf8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a12      	ldr	r2, [pc, #72]	; (8004bbc <TIM_Base_SetConfig+0x124>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00b      	beq.n	8004b90 <TIM_Base_SetConfig+0xf8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a11      	ldr	r2, [pc, #68]	; (8004bc0 <TIM_Base_SetConfig+0x128>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <TIM_Base_SetConfig+0xf8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a10      	ldr	r2, [pc, #64]	; (8004bc4 <TIM_Base_SetConfig+0x12c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <TIM_Base_SetConfig+0xf8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a0f      	ldr	r2, [pc, #60]	; (8004bc8 <TIM_Base_SetConfig+0x130>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d103      	bne.n	8004b98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	615a      	str	r2, [r3, #20]
}
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40012c00 	.word	0x40012c00
 8004bb0:	40000400 	.word	0x40000400
 8004bb4:	40000800 	.word	0x40000800
 8004bb8:	40000c00 	.word	0x40000c00
 8004bbc:	40013400 	.word	0x40013400
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40014400 	.word	0x40014400
 8004bc8:	40014800 	.word	0x40014800

08004bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e040      	b.n	8004c9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fc f822 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2224      	movs	r2, #36	; 0x24
 8004c34:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0201 	bic.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fe74 	bl	800593c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fbb9 	bl	80053cc <UART_SetConfig>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e01b      	b.n	8004c9c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fef3 	bl	8005a80 <UART_CheckIdleState>
 8004c9a:	4603      	mov	r3, r0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08a      	sub	sp, #40	; 0x28
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d178      	bne.n	8004dae <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_UART_Transmit+0x24>
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e071      	b.n	8004db0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2221      	movs	r2, #33	; 0x21
 8004cd8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cda:	f7fc f9ad 	bl	8001038 <HAL_GetTick>
 8004cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	88fa      	ldrh	r2, [r7, #6]
 8004ce4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	88fa      	ldrh	r2, [r7, #6]
 8004cec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf8:	d108      	bne.n	8004d0c <HAL_UART_Transmit+0x68>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d104      	bne.n	8004d0c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	61bb      	str	r3, [r7, #24]
 8004d0a:	e003      	b.n	8004d14 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d14:	e030      	b.n	8004d78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2180      	movs	r1, #128	; 0x80
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 ff55 	bl	8005bd0 <UART_WaitOnFlagUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d004      	beq.n	8004d36 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e03c      	b.n	8004db0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10b      	bne.n	8004d54 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	881a      	ldrh	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d48:	b292      	uxth	r2, r2
 8004d4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	3302      	adds	r3, #2
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	e008      	b.n	8004d66 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	781a      	ldrb	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	b292      	uxth	r2, r2
 8004d5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	3301      	adds	r3, #1
 8004d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1c8      	bne.n	8004d16 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2140      	movs	r1, #64	; 0x40
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 ff1e 	bl	8005bd0 <UART_WaitOnFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d004      	beq.n	8004da4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e005      	b.n	8004db0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e000      	b.n	8004db0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
  }
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b0ba      	sub	sp, #232	; 0xe8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004de2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004de6:	4013      	ands	r3, r2
 8004de8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d115      	bne.n	8004e20 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00f      	beq.n	8004e20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d009      	beq.n	8004e20 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 82ae 	beq.w	8005372 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	4798      	blx	r3
      }
      return;
 8004e1e:	e2a8      	b.n	8005372 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004e20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8117 	beq.w	8005058 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e3a:	4b85      	ldr	r3, [pc, #532]	; (8005050 <HAL_UART_IRQHandler+0x298>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 810a 	beq.w	8005058 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d011      	beq.n	8004e74 <HAL_UART_IRQHandler+0xbc>
 8004e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00b      	beq.n	8004e74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2201      	movs	r2, #1
 8004e62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e6a:	f043 0201 	orr.w	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d011      	beq.n	8004ea4 <HAL_UART_IRQHandler+0xec>
 8004e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00b      	beq.n	8004ea4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2202      	movs	r2, #2
 8004e92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e9a:	f043 0204 	orr.w	r2, r3, #4
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d011      	beq.n	8004ed4 <HAL_UART_IRQHandler+0x11c>
 8004eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00b      	beq.n	8004ed4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eca:	f043 0202 	orr.w	r2, r3, #2
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d017      	beq.n	8004f10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d105      	bne.n	8004ef8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ef0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00b      	beq.n	8004f10 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2208      	movs	r2, #8
 8004efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f06:	f043 0208 	orr.w	r2, r3, #8
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d012      	beq.n	8004f42 <HAL_UART_IRQHandler+0x18a>
 8004f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00c      	beq.n	8004f42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f38:	f043 0220 	orr.w	r2, r3, #32
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 8214 	beq.w	8005376 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00d      	beq.n	8004f76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d005      	beq.n	8004f9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d04f      	beq.n	800503a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fe7f 	bl	8005c9e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004faa:	2b40      	cmp	r3, #64	; 0x40
 8004fac:	d141      	bne.n	8005032 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1d9      	bne.n	8004fae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d013      	beq.n	800502a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005006:	4a13      	ldr	r2, [pc, #76]	; (8005054 <HAL_UART_IRQHandler+0x29c>)
 8005008:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500e:	4618      	mov	r0, r3
 8005010:	f7fc fa26 	bl	8001460 <HAL_DMA_Abort_IT>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d017      	beq.n	800504a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005024:	4610      	mov	r0, r2
 8005026:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005028:	e00f      	b.n	800504a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f9b8 	bl	80053a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005030:	e00b      	b.n	800504a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f9b4 	bl	80053a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005038:	e007      	b.n	800504a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f9b0 	bl	80053a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005048:	e195      	b.n	8005376 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504a:	bf00      	nop
    return;
 800504c:	e193      	b.n	8005376 <HAL_UART_IRQHandler+0x5be>
 800504e:	bf00      	nop
 8005050:	04000120 	.word	0x04000120
 8005054:	08005d67 	.word	0x08005d67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800505c:	2b01      	cmp	r3, #1
 800505e:	f040 814e 	bne.w	80052fe <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005066:	f003 0310 	and.w	r3, r3, #16
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 8147 	beq.w	80052fe <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005074:	f003 0310 	and.w	r3, r3, #16
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 8140 	beq.w	80052fe <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2210      	movs	r2, #16
 8005084:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005090:	2b40      	cmp	r3, #64	; 0x40
 8005092:	f040 80b8 	bne.w	8005206 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8167 	beq.w	800537a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050b6:	429a      	cmp	r2, r3
 80050b8:	f080 815f 	bcs.w	800537a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f040 8086 	bne.w	80051e4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050e4:	e853 3f00 	ldrex	r3, [r3]
 80050e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005102:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005106:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800510e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800511a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1da      	bne.n	80050d8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3308      	adds	r3, #8
 8005128:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005134:	f023 0301 	bic.w	r3, r3, #1
 8005138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3308      	adds	r3, #8
 8005142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005146:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800514a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800514e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e1      	bne.n	8005122 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3308      	adds	r3, #8
 8005164:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800516e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005174:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3308      	adds	r3, #8
 800517e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005182:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005184:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005188:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e3      	bne.n	800515e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051b4:	f023 0310 	bic.w	r3, r3, #16
 80051b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80051c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1e4      	bne.n	80051a4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fc f900 	bl	80013e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	4619      	mov	r1, r3
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f8d8 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005204:	e0b9      	b.n	800537a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005212:	b29b      	uxth	r3, r3
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 80ab 	beq.w	800537e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005228:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 80a6 	beq.w	800537e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005242:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005246:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005254:	647b      	str	r3, [r7, #68]	; 0x44
 8005256:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800525a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800525c:	e841 2300 	strex	r3, r2, [r1]
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e4      	bne.n	8005232 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3308      	adds	r3, #8
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	623b      	str	r3, [r7, #32]
   return(result);
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3308      	adds	r3, #8
 8005288:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800528c:	633a      	str	r2, [r7, #48]	; 0x30
 800528e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e3      	bne.n	8005268 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	e853 3f00 	ldrex	r3, [r3]
 80052c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f023 0310 	bic.w	r3, r3, #16
 80052c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	461a      	mov	r2, r3
 80052d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052d6:	61fb      	str	r3, [r7, #28]
 80052d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052da:	69b9      	ldr	r1, [r7, #24]
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	e841 2300 	strex	r3, r2, [r1]
 80052e2:	617b      	str	r3, [r7, #20]
   return(result);
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1e4      	bne.n	80052b4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2202      	movs	r2, #2
 80052ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052f4:	4619      	mov	r1, r3
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f85c 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052fc:	e03f      	b.n	800537e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00e      	beq.n	8005328 <HAL_UART_IRQHandler+0x570>
 800530a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800530e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800531e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fd60 	bl	8005de6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005326:	e02d      	b.n	8005384 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00e      	beq.n	8005352 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533c:	2b00      	cmp	r3, #0
 800533e:	d008      	beq.n	8005352 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01c      	beq.n	8005382 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	4798      	blx	r3
    }
    return;
 8005350:	e017      	b.n	8005382 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d012      	beq.n	8005384 <HAL_UART_IRQHandler+0x5cc>
 800535e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00c      	beq.n	8005384 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fd11 	bl	8005d92 <UART_EndTransmit_IT>
    return;
 8005370:	e008      	b.n	8005384 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005372:	bf00      	nop
 8005374:	e006      	b.n	8005384 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005376:	bf00      	nop
 8005378:	e004      	b.n	8005384 <HAL_UART_IRQHandler+0x5cc>
      return;
 800537a:	bf00      	nop
 800537c:	e002      	b.n	8005384 <HAL_UART_IRQHandler+0x5cc>
      return;
 800537e:	bf00      	nop
 8005380:	e000      	b.n	8005384 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005382:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005384:	37e8      	adds	r7, #232	; 0xe8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop

0800538c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053d0:	b08a      	sub	sp, #40	; 0x28
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	431a      	orrs	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	4ba4      	ldr	r3, [pc, #656]	; (800568c <UART_SetConfig+0x2c0>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	6812      	ldr	r2, [r2, #0]
 8005402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005404:	430b      	orrs	r3, r1
 8005406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a99      	ldr	r2, [pc, #612]	; (8005690 <UART_SetConfig+0x2c4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d004      	beq.n	8005438 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005434:	4313      	orrs	r3, r2
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005448:	430a      	orrs	r2, r1
 800544a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a90      	ldr	r2, [pc, #576]	; (8005694 <UART_SetConfig+0x2c8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d126      	bne.n	80054a4 <UART_SetConfig+0xd8>
 8005456:	4b90      	ldr	r3, [pc, #576]	; (8005698 <UART_SetConfig+0x2cc>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	2b03      	cmp	r3, #3
 8005462:	d81b      	bhi.n	800549c <UART_SetConfig+0xd0>
 8005464:	a201      	add	r2, pc, #4	; (adr r2, 800546c <UART_SetConfig+0xa0>)
 8005466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546a:	bf00      	nop
 800546c:	0800547d 	.word	0x0800547d
 8005470:	0800548d 	.word	0x0800548d
 8005474:	08005485 	.word	0x08005485
 8005478:	08005495 	.word	0x08005495
 800547c:	2301      	movs	r3, #1
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005482:	e116      	b.n	80056b2 <UART_SetConfig+0x2e6>
 8005484:	2302      	movs	r3, #2
 8005486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548a:	e112      	b.n	80056b2 <UART_SetConfig+0x2e6>
 800548c:	2304      	movs	r3, #4
 800548e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005492:	e10e      	b.n	80056b2 <UART_SetConfig+0x2e6>
 8005494:	2308      	movs	r3, #8
 8005496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800549a:	e10a      	b.n	80056b2 <UART_SetConfig+0x2e6>
 800549c:	2310      	movs	r3, #16
 800549e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a2:	e106      	b.n	80056b2 <UART_SetConfig+0x2e6>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a7c      	ldr	r2, [pc, #496]	; (800569c <UART_SetConfig+0x2d0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d138      	bne.n	8005520 <UART_SetConfig+0x154>
 80054ae:	4b7a      	ldr	r3, [pc, #488]	; (8005698 <UART_SetConfig+0x2cc>)
 80054b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b4:	f003 030c 	and.w	r3, r3, #12
 80054b8:	2b0c      	cmp	r3, #12
 80054ba:	d82d      	bhi.n	8005518 <UART_SetConfig+0x14c>
 80054bc:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <UART_SetConfig+0xf8>)
 80054be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c2:	bf00      	nop
 80054c4:	080054f9 	.word	0x080054f9
 80054c8:	08005519 	.word	0x08005519
 80054cc:	08005519 	.word	0x08005519
 80054d0:	08005519 	.word	0x08005519
 80054d4:	08005509 	.word	0x08005509
 80054d8:	08005519 	.word	0x08005519
 80054dc:	08005519 	.word	0x08005519
 80054e0:	08005519 	.word	0x08005519
 80054e4:	08005501 	.word	0x08005501
 80054e8:	08005519 	.word	0x08005519
 80054ec:	08005519 	.word	0x08005519
 80054f0:	08005519 	.word	0x08005519
 80054f4:	08005511 	.word	0x08005511
 80054f8:	2300      	movs	r3, #0
 80054fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054fe:	e0d8      	b.n	80056b2 <UART_SetConfig+0x2e6>
 8005500:	2302      	movs	r3, #2
 8005502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005506:	e0d4      	b.n	80056b2 <UART_SetConfig+0x2e6>
 8005508:	2304      	movs	r3, #4
 800550a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800550e:	e0d0      	b.n	80056b2 <UART_SetConfig+0x2e6>
 8005510:	2308      	movs	r3, #8
 8005512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005516:	e0cc      	b.n	80056b2 <UART_SetConfig+0x2e6>
 8005518:	2310      	movs	r3, #16
 800551a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800551e:	e0c8      	b.n	80056b2 <UART_SetConfig+0x2e6>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a5e      	ldr	r2, [pc, #376]	; (80056a0 <UART_SetConfig+0x2d4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d125      	bne.n	8005576 <UART_SetConfig+0x1aa>
 800552a:	4b5b      	ldr	r3, [pc, #364]	; (8005698 <UART_SetConfig+0x2cc>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005530:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005534:	2b30      	cmp	r3, #48	; 0x30
 8005536:	d016      	beq.n	8005566 <UART_SetConfig+0x19a>
 8005538:	2b30      	cmp	r3, #48	; 0x30
 800553a:	d818      	bhi.n	800556e <UART_SetConfig+0x1a2>
 800553c:	2b20      	cmp	r3, #32
 800553e:	d00a      	beq.n	8005556 <UART_SetConfig+0x18a>
 8005540:	2b20      	cmp	r3, #32
 8005542:	d814      	bhi.n	800556e <UART_SetConfig+0x1a2>
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <UART_SetConfig+0x182>
 8005548:	2b10      	cmp	r3, #16
 800554a:	d008      	beq.n	800555e <UART_SetConfig+0x192>
 800554c:	e00f      	b.n	800556e <UART_SetConfig+0x1a2>
 800554e:	2300      	movs	r3, #0
 8005550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005554:	e0ad      	b.n	80056b2 <UART_SetConfig+0x2e6>
 8005556:	2302      	movs	r3, #2
 8005558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800555c:	e0a9      	b.n	80056b2 <UART_SetConfig+0x2e6>
 800555e:	2304      	movs	r3, #4
 8005560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005564:	e0a5      	b.n	80056b2 <UART_SetConfig+0x2e6>
 8005566:	2308      	movs	r3, #8
 8005568:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800556c:	e0a1      	b.n	80056b2 <UART_SetConfig+0x2e6>
 800556e:	2310      	movs	r3, #16
 8005570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005574:	e09d      	b.n	80056b2 <UART_SetConfig+0x2e6>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a4a      	ldr	r2, [pc, #296]	; (80056a4 <UART_SetConfig+0x2d8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d125      	bne.n	80055cc <UART_SetConfig+0x200>
 8005580:	4b45      	ldr	r3, [pc, #276]	; (8005698 <UART_SetConfig+0x2cc>)
 8005582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005586:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800558a:	2bc0      	cmp	r3, #192	; 0xc0
 800558c:	d016      	beq.n	80055bc <UART_SetConfig+0x1f0>
 800558e:	2bc0      	cmp	r3, #192	; 0xc0
 8005590:	d818      	bhi.n	80055c4 <UART_SetConfig+0x1f8>
 8005592:	2b80      	cmp	r3, #128	; 0x80
 8005594:	d00a      	beq.n	80055ac <UART_SetConfig+0x1e0>
 8005596:	2b80      	cmp	r3, #128	; 0x80
 8005598:	d814      	bhi.n	80055c4 <UART_SetConfig+0x1f8>
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <UART_SetConfig+0x1d8>
 800559e:	2b40      	cmp	r3, #64	; 0x40
 80055a0:	d008      	beq.n	80055b4 <UART_SetConfig+0x1e8>
 80055a2:	e00f      	b.n	80055c4 <UART_SetConfig+0x1f8>
 80055a4:	2300      	movs	r3, #0
 80055a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055aa:	e082      	b.n	80056b2 <UART_SetConfig+0x2e6>
 80055ac:	2302      	movs	r3, #2
 80055ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b2:	e07e      	b.n	80056b2 <UART_SetConfig+0x2e6>
 80055b4:	2304      	movs	r3, #4
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ba:	e07a      	b.n	80056b2 <UART_SetConfig+0x2e6>
 80055bc:	2308      	movs	r3, #8
 80055be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c2:	e076      	b.n	80056b2 <UART_SetConfig+0x2e6>
 80055c4:	2310      	movs	r3, #16
 80055c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ca:	e072      	b.n	80056b2 <UART_SetConfig+0x2e6>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a35      	ldr	r2, [pc, #212]	; (80056a8 <UART_SetConfig+0x2dc>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d12a      	bne.n	800562c <UART_SetConfig+0x260>
 80055d6:	4b30      	ldr	r3, [pc, #192]	; (8005698 <UART_SetConfig+0x2cc>)
 80055d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e4:	d01a      	beq.n	800561c <UART_SetConfig+0x250>
 80055e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ea:	d81b      	bhi.n	8005624 <UART_SetConfig+0x258>
 80055ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f0:	d00c      	beq.n	800560c <UART_SetConfig+0x240>
 80055f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f6:	d815      	bhi.n	8005624 <UART_SetConfig+0x258>
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <UART_SetConfig+0x238>
 80055fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005600:	d008      	beq.n	8005614 <UART_SetConfig+0x248>
 8005602:	e00f      	b.n	8005624 <UART_SetConfig+0x258>
 8005604:	2300      	movs	r3, #0
 8005606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800560a:	e052      	b.n	80056b2 <UART_SetConfig+0x2e6>
 800560c:	2302      	movs	r3, #2
 800560e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005612:	e04e      	b.n	80056b2 <UART_SetConfig+0x2e6>
 8005614:	2304      	movs	r3, #4
 8005616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561a:	e04a      	b.n	80056b2 <UART_SetConfig+0x2e6>
 800561c:	2308      	movs	r3, #8
 800561e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005622:	e046      	b.n	80056b2 <UART_SetConfig+0x2e6>
 8005624:	2310      	movs	r3, #16
 8005626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800562a:	e042      	b.n	80056b2 <UART_SetConfig+0x2e6>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a17      	ldr	r2, [pc, #92]	; (8005690 <UART_SetConfig+0x2c4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d13a      	bne.n	80056ac <UART_SetConfig+0x2e0>
 8005636:	4b18      	ldr	r3, [pc, #96]	; (8005698 <UART_SetConfig+0x2cc>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005640:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005644:	d01a      	beq.n	800567c <UART_SetConfig+0x2b0>
 8005646:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800564a:	d81b      	bhi.n	8005684 <UART_SetConfig+0x2b8>
 800564c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005650:	d00c      	beq.n	800566c <UART_SetConfig+0x2a0>
 8005652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005656:	d815      	bhi.n	8005684 <UART_SetConfig+0x2b8>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <UART_SetConfig+0x298>
 800565c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005660:	d008      	beq.n	8005674 <UART_SetConfig+0x2a8>
 8005662:	e00f      	b.n	8005684 <UART_SetConfig+0x2b8>
 8005664:	2300      	movs	r3, #0
 8005666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566a:	e022      	b.n	80056b2 <UART_SetConfig+0x2e6>
 800566c:	2302      	movs	r3, #2
 800566e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005672:	e01e      	b.n	80056b2 <UART_SetConfig+0x2e6>
 8005674:	2304      	movs	r3, #4
 8005676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567a:	e01a      	b.n	80056b2 <UART_SetConfig+0x2e6>
 800567c:	2308      	movs	r3, #8
 800567e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005682:	e016      	b.n	80056b2 <UART_SetConfig+0x2e6>
 8005684:	2310      	movs	r3, #16
 8005686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800568a:	e012      	b.n	80056b2 <UART_SetConfig+0x2e6>
 800568c:	efff69f3 	.word	0xefff69f3
 8005690:	40008000 	.word	0x40008000
 8005694:	40013800 	.word	0x40013800
 8005698:	40021000 	.word	0x40021000
 800569c:	40004400 	.word	0x40004400
 80056a0:	40004800 	.word	0x40004800
 80056a4:	40004c00 	.word	0x40004c00
 80056a8:	40005000 	.word	0x40005000
 80056ac:	2310      	movs	r3, #16
 80056ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a9f      	ldr	r2, [pc, #636]	; (8005934 <UART_SetConfig+0x568>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d17a      	bne.n	80057b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d824      	bhi.n	800570e <UART_SetConfig+0x342>
 80056c4:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <UART_SetConfig+0x300>)
 80056c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ca:	bf00      	nop
 80056cc:	080056f1 	.word	0x080056f1
 80056d0:	0800570f 	.word	0x0800570f
 80056d4:	080056f9 	.word	0x080056f9
 80056d8:	0800570f 	.word	0x0800570f
 80056dc:	080056ff 	.word	0x080056ff
 80056e0:	0800570f 	.word	0x0800570f
 80056e4:	0800570f 	.word	0x0800570f
 80056e8:	0800570f 	.word	0x0800570f
 80056ec:	08005707 	.word	0x08005707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f0:	f7fe fb08 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 80056f4:	61f8      	str	r0, [r7, #28]
        break;
 80056f6:	e010      	b.n	800571a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f8:	4b8f      	ldr	r3, [pc, #572]	; (8005938 <UART_SetConfig+0x56c>)
 80056fa:	61fb      	str	r3, [r7, #28]
        break;
 80056fc:	e00d      	b.n	800571a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fe:	f7fe fa69 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8005702:	61f8      	str	r0, [r7, #28]
        break;
 8005704:	e009      	b.n	800571a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800570a:	61fb      	str	r3, [r7, #28]
        break;
 800570c:	e005      	b.n	800571a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005718:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 80fb 	beq.w	8005918 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	4413      	add	r3, r2
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	429a      	cmp	r2, r3
 8005730:	d305      	bcc.n	800573e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005738:	69fa      	ldr	r2, [r7, #28]
 800573a:	429a      	cmp	r2, r3
 800573c:	d903      	bls.n	8005746 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005744:	e0e8      	b.n	8005918 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	2200      	movs	r2, #0
 800574a:	461c      	mov	r4, r3
 800574c:	4615      	mov	r5, r2
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	022b      	lsls	r3, r5, #8
 8005758:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800575c:	0222      	lsls	r2, r4, #8
 800575e:	68f9      	ldr	r1, [r7, #12]
 8005760:	6849      	ldr	r1, [r1, #4]
 8005762:	0849      	lsrs	r1, r1, #1
 8005764:	2000      	movs	r0, #0
 8005766:	4688      	mov	r8, r1
 8005768:	4681      	mov	r9, r0
 800576a:	eb12 0a08 	adds.w	sl, r2, r8
 800576e:	eb43 0b09 	adc.w	fp, r3, r9
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	603b      	str	r3, [r7, #0]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005780:	4650      	mov	r0, sl
 8005782:	4659      	mov	r1, fp
 8005784:	f7fa fd20 	bl	80001c8 <__aeabi_uldivmod>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4613      	mov	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005796:	d308      	bcc.n	80057aa <UART_SetConfig+0x3de>
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800579e:	d204      	bcs.n	80057aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	60da      	str	r2, [r3, #12]
 80057a8:	e0b6      	b.n	8005918 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057b0:	e0b2      	b.n	8005918 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ba:	d15e      	bne.n	800587a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80057bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d828      	bhi.n	8005816 <UART_SetConfig+0x44a>
 80057c4:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <UART_SetConfig+0x400>)
 80057c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ca:	bf00      	nop
 80057cc:	080057f1 	.word	0x080057f1
 80057d0:	080057f9 	.word	0x080057f9
 80057d4:	08005801 	.word	0x08005801
 80057d8:	08005817 	.word	0x08005817
 80057dc:	08005807 	.word	0x08005807
 80057e0:	08005817 	.word	0x08005817
 80057e4:	08005817 	.word	0x08005817
 80057e8:	08005817 	.word	0x08005817
 80057ec:	0800580f 	.word	0x0800580f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f0:	f7fe fa88 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 80057f4:	61f8      	str	r0, [r7, #28]
        break;
 80057f6:	e014      	b.n	8005822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057f8:	f7fe fa9a 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 80057fc:	61f8      	str	r0, [r7, #28]
        break;
 80057fe:	e010      	b.n	8005822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005800:	4b4d      	ldr	r3, [pc, #308]	; (8005938 <UART_SetConfig+0x56c>)
 8005802:	61fb      	str	r3, [r7, #28]
        break;
 8005804:	e00d      	b.n	8005822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005806:	f7fe f9e5 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 800580a:	61f8      	str	r0, [r7, #28]
        break;
 800580c:	e009      	b.n	8005822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005812:	61fb      	str	r3, [r7, #28]
        break;
 8005814:	e005      	b.n	8005822 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005820:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d077      	beq.n	8005918 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	005a      	lsls	r2, r3, #1
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	085b      	lsrs	r3, r3, #1
 8005832:	441a      	add	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	fbb2 f3f3 	udiv	r3, r2, r3
 800583c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	2b0f      	cmp	r3, #15
 8005842:	d916      	bls.n	8005872 <UART_SetConfig+0x4a6>
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800584a:	d212      	bcs.n	8005872 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	b29b      	uxth	r3, r3
 8005850:	f023 030f 	bic.w	r3, r3, #15
 8005854:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	085b      	lsrs	r3, r3, #1
 800585a:	b29b      	uxth	r3, r3
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	b29a      	uxth	r2, r3
 8005862:	8afb      	ldrh	r3, [r7, #22]
 8005864:	4313      	orrs	r3, r2
 8005866:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	8afa      	ldrh	r2, [r7, #22]
 800586e:	60da      	str	r2, [r3, #12]
 8005870:	e052      	b.n	8005918 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005878:	e04e      	b.n	8005918 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800587a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800587e:	2b08      	cmp	r3, #8
 8005880:	d827      	bhi.n	80058d2 <UART_SetConfig+0x506>
 8005882:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <UART_SetConfig+0x4bc>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	080058ad 	.word	0x080058ad
 800588c:	080058b5 	.word	0x080058b5
 8005890:	080058bd 	.word	0x080058bd
 8005894:	080058d3 	.word	0x080058d3
 8005898:	080058c3 	.word	0x080058c3
 800589c:	080058d3 	.word	0x080058d3
 80058a0:	080058d3 	.word	0x080058d3
 80058a4:	080058d3 	.word	0x080058d3
 80058a8:	080058cb 	.word	0x080058cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058ac:	f7fe fa2a 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 80058b0:	61f8      	str	r0, [r7, #28]
        break;
 80058b2:	e014      	b.n	80058de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058b4:	f7fe fa3c 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 80058b8:	61f8      	str	r0, [r7, #28]
        break;
 80058ba:	e010      	b.n	80058de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058bc:	4b1e      	ldr	r3, [pc, #120]	; (8005938 <UART_SetConfig+0x56c>)
 80058be:	61fb      	str	r3, [r7, #28]
        break;
 80058c0:	e00d      	b.n	80058de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058c2:	f7fe f987 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 80058c6:	61f8      	str	r0, [r7, #28]
        break;
 80058c8:	e009      	b.n	80058de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ce:	61fb      	str	r3, [r7, #28]
        break;
 80058d0:	e005      	b.n	80058de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058dc:	bf00      	nop
    }

    if (pclk != 0U)
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d019      	beq.n	8005918 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	085a      	lsrs	r2, r3, #1
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	441a      	add	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	2b0f      	cmp	r3, #15
 80058fc:	d909      	bls.n	8005912 <UART_SetConfig+0x546>
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005904:	d205      	bcs.n	8005912 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	60da      	str	r2, [r3, #12]
 8005910:	e002      	b.n	8005918 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005924:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005928:	4618      	mov	r0, r3
 800592a:	3728      	adds	r7, #40	; 0x28
 800592c:	46bd      	mov	sp, r7
 800592e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005932:	bf00      	nop
 8005934:	40008000 	.word	0x40008000
 8005938:	00f42400 	.word	0x00f42400

0800593c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00a      	beq.n	8005966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00a      	beq.n	80059aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	f003 0320 	and.w	r3, r3, #32
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d01a      	beq.n	8005a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a3a:	d10a      	bne.n	8005a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	605a      	str	r2, [r3, #4]
  }
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b098      	sub	sp, #96	; 0x60
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a90:	f7fb fad2 	bl	8001038 <HAL_GetTick>
 8005a94:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d12e      	bne.n	8005b02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aac:	2200      	movs	r2, #0
 8005aae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f88c 	bl	8005bd0 <UART_WaitOnFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d021      	beq.n	8005b02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005adc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ade:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e6      	bne.n	8005abe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e062      	b.n	8005bc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d149      	bne.n	8005ba4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f856 	bl	8005bd0 <UART_WaitOnFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d03c      	beq.n	8005ba4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	e853 3f00 	ldrex	r3, [r3]
 8005b36:	623b      	str	r3, [r7, #32]
   return(result);
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	461a      	mov	r2, r3
 8005b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b48:	633b      	str	r3, [r7, #48]	; 0x30
 8005b4a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e6      	bne.n	8005b2a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3308      	adds	r3, #8
 8005b62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0301 	bic.w	r3, r3, #1
 8005b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3308      	adds	r3, #8
 8005b7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b7c:	61fa      	str	r2, [r7, #28]
 8005b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	69b9      	ldr	r1, [r7, #24]
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	617b      	str	r3, [r7, #20]
   return(result);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e5      	bne.n	8005b5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e011      	b.n	8005bc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3758      	adds	r7, #88	; 0x58
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005be0:	e049      	b.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005be8:	d045      	beq.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bea:	f7fb fa25 	bl	8001038 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d302      	bcc.n	8005c00 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e048      	b.n	8005c96 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d031      	beq.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d110      	bne.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2208      	movs	r2, #8
 8005c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f838 	bl	8005c9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2208      	movs	r2, #8
 8005c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e029      	b.n	8005c96 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c50:	d111      	bne.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 f81e 	bl	8005c9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e00f      	b.n	8005c96 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69da      	ldr	r2, [r3, #28]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	bf0c      	ite	eq
 8005c86:	2301      	moveq	r3, #1
 8005c88:	2300      	movne	r3, #0
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d0a6      	beq.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b095      	sub	sp, #84	; 0x54
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8005cc6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ccc:	e841 2300 	strex	r3, r2, [r1]
 8005cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e6      	bne.n	8005ca6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3308      	adds	r3, #8
 8005cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	e853 3f00 	ldrex	r3, [r3]
 8005ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f023 0301 	bic.w	r3, r3, #1
 8005cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d00:	e841 2300 	strex	r3, r2, [r1]
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1e5      	bne.n	8005cd8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d118      	bne.n	8005d46 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f023 0310 	bic.w	r3, r3, #16
 8005d28:	647b      	str	r3, [r7, #68]	; 0x44
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d32:	61bb      	str	r3, [r7, #24]
 8005d34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d36:	6979      	ldr	r1, [r7, #20]
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	e841 2300 	strex	r3, r2, [r1]
 8005d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1e6      	bne.n	8005d14 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d5a:	bf00      	nop
 8005d5c:	3754      	adds	r7, #84	; 0x54
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f7ff fb0b 	bl	80053a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d8a:	bf00      	nop
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b088      	sub	sp, #32
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dae:	61fb      	str	r3, [r7, #28]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	6979      	ldr	r1, [r7, #20]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e6      	bne.n	8005d9a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff fad7 	bl	800538c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dde:	bf00      	nop
 8005de0:	3720      	adds	r7, #32
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
	...

08005dfc <std>:
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	b510      	push	{r4, lr}
 8005e00:	4604      	mov	r4, r0
 8005e02:	e9c0 3300 	strd	r3, r3, [r0]
 8005e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e0a:	6083      	str	r3, [r0, #8]
 8005e0c:	8181      	strh	r1, [r0, #12]
 8005e0e:	6643      	str	r3, [r0, #100]	; 0x64
 8005e10:	81c2      	strh	r2, [r0, #14]
 8005e12:	6183      	str	r3, [r0, #24]
 8005e14:	4619      	mov	r1, r3
 8005e16:	2208      	movs	r2, #8
 8005e18:	305c      	adds	r0, #92	; 0x5c
 8005e1a:	f000 f90d 	bl	8006038 <memset>
 8005e1e:	4b0d      	ldr	r3, [pc, #52]	; (8005e54 <std+0x58>)
 8005e20:	6263      	str	r3, [r4, #36]	; 0x24
 8005e22:	4b0d      	ldr	r3, [pc, #52]	; (8005e58 <std+0x5c>)
 8005e24:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e26:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <std+0x60>)
 8005e28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	; (8005e60 <std+0x64>)
 8005e2c:	6323      	str	r3, [r4, #48]	; 0x30
 8005e2e:	4b0d      	ldr	r3, [pc, #52]	; (8005e64 <std+0x68>)
 8005e30:	6224      	str	r4, [r4, #32]
 8005e32:	429c      	cmp	r4, r3
 8005e34:	d006      	beq.n	8005e44 <std+0x48>
 8005e36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005e3a:	4294      	cmp	r4, r2
 8005e3c:	d002      	beq.n	8005e44 <std+0x48>
 8005e3e:	33d0      	adds	r3, #208	; 0xd0
 8005e40:	429c      	cmp	r4, r3
 8005e42:	d105      	bne.n	8005e50 <std+0x54>
 8005e44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e4c:	f000 b926 	b.w	800609c <__retarget_lock_init_recursive>
 8005e50:	bd10      	pop	{r4, pc}
 8005e52:	bf00      	nop
 8005e54:	08006359 	.word	0x08006359
 8005e58:	0800637b 	.word	0x0800637b
 8005e5c:	080063b3 	.word	0x080063b3
 8005e60:	080063d7 	.word	0x080063d7
 8005e64:	2000027c 	.word	0x2000027c

08005e68 <stdio_exit_handler>:
 8005e68:	4a02      	ldr	r2, [pc, #8]	; (8005e74 <stdio_exit_handler+0xc>)
 8005e6a:	4903      	ldr	r1, [pc, #12]	; (8005e78 <stdio_exit_handler+0x10>)
 8005e6c:	4803      	ldr	r0, [pc, #12]	; (8005e7c <stdio_exit_handler+0x14>)
 8005e6e:	f000 b869 	b.w	8005f44 <_fwalk_sglue>
 8005e72:	bf00      	nop
 8005e74:	2000000c 	.word	0x2000000c
 8005e78:	080062f1 	.word	0x080062f1
 8005e7c:	20000018 	.word	0x20000018

08005e80 <cleanup_stdio>:
 8005e80:	6841      	ldr	r1, [r0, #4]
 8005e82:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <cleanup_stdio+0x34>)
 8005e84:	4299      	cmp	r1, r3
 8005e86:	b510      	push	{r4, lr}
 8005e88:	4604      	mov	r4, r0
 8005e8a:	d001      	beq.n	8005e90 <cleanup_stdio+0x10>
 8005e8c:	f000 fa30 	bl	80062f0 <_fflush_r>
 8005e90:	68a1      	ldr	r1, [r4, #8]
 8005e92:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <cleanup_stdio+0x38>)
 8005e94:	4299      	cmp	r1, r3
 8005e96:	d002      	beq.n	8005e9e <cleanup_stdio+0x1e>
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 fa29 	bl	80062f0 <_fflush_r>
 8005e9e:	68e1      	ldr	r1, [r4, #12]
 8005ea0:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <cleanup_stdio+0x3c>)
 8005ea2:	4299      	cmp	r1, r3
 8005ea4:	d004      	beq.n	8005eb0 <cleanup_stdio+0x30>
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eac:	f000 ba20 	b.w	80062f0 <_fflush_r>
 8005eb0:	bd10      	pop	{r4, pc}
 8005eb2:	bf00      	nop
 8005eb4:	2000027c 	.word	0x2000027c
 8005eb8:	200002e4 	.word	0x200002e4
 8005ebc:	2000034c 	.word	0x2000034c

08005ec0 <global_stdio_init.part.0>:
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <global_stdio_init.part.0+0x30>)
 8005ec4:	4c0b      	ldr	r4, [pc, #44]	; (8005ef4 <global_stdio_init.part.0+0x34>)
 8005ec6:	4a0c      	ldr	r2, [pc, #48]	; (8005ef8 <global_stdio_init.part.0+0x38>)
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	4620      	mov	r0, r4
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2104      	movs	r1, #4
 8005ed0:	f7ff ff94 	bl	8005dfc <std>
 8005ed4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005ed8:	2201      	movs	r2, #1
 8005eda:	2109      	movs	r1, #9
 8005edc:	f7ff ff8e 	bl	8005dfc <std>
 8005ee0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eea:	2112      	movs	r1, #18
 8005eec:	f7ff bf86 	b.w	8005dfc <std>
 8005ef0:	200003b4 	.word	0x200003b4
 8005ef4:	2000027c 	.word	0x2000027c
 8005ef8:	08005e69 	.word	0x08005e69

08005efc <__sfp_lock_acquire>:
 8005efc:	4801      	ldr	r0, [pc, #4]	; (8005f04 <__sfp_lock_acquire+0x8>)
 8005efe:	f000 b8ce 	b.w	800609e <__retarget_lock_acquire_recursive>
 8005f02:	bf00      	nop
 8005f04:	200003b9 	.word	0x200003b9

08005f08 <__sfp_lock_release>:
 8005f08:	4801      	ldr	r0, [pc, #4]	; (8005f10 <__sfp_lock_release+0x8>)
 8005f0a:	f000 b8c9 	b.w	80060a0 <__retarget_lock_release_recursive>
 8005f0e:	bf00      	nop
 8005f10:	200003b9 	.word	0x200003b9

08005f14 <__sinit>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	4604      	mov	r4, r0
 8005f18:	f7ff fff0 	bl	8005efc <__sfp_lock_acquire>
 8005f1c:	6a23      	ldr	r3, [r4, #32]
 8005f1e:	b11b      	cbz	r3, 8005f28 <__sinit+0x14>
 8005f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f24:	f7ff bff0 	b.w	8005f08 <__sfp_lock_release>
 8005f28:	4b04      	ldr	r3, [pc, #16]	; (8005f3c <__sinit+0x28>)
 8005f2a:	6223      	str	r3, [r4, #32]
 8005f2c:	4b04      	ldr	r3, [pc, #16]	; (8005f40 <__sinit+0x2c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f5      	bne.n	8005f20 <__sinit+0xc>
 8005f34:	f7ff ffc4 	bl	8005ec0 <global_stdio_init.part.0>
 8005f38:	e7f2      	b.n	8005f20 <__sinit+0xc>
 8005f3a:	bf00      	nop
 8005f3c:	08005e81 	.word	0x08005e81
 8005f40:	200003b4 	.word	0x200003b4

08005f44 <_fwalk_sglue>:
 8005f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f48:	4607      	mov	r7, r0
 8005f4a:	4688      	mov	r8, r1
 8005f4c:	4614      	mov	r4, r2
 8005f4e:	2600      	movs	r6, #0
 8005f50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f54:	f1b9 0901 	subs.w	r9, r9, #1
 8005f58:	d505      	bpl.n	8005f66 <_fwalk_sglue+0x22>
 8005f5a:	6824      	ldr	r4, [r4, #0]
 8005f5c:	2c00      	cmp	r4, #0
 8005f5e:	d1f7      	bne.n	8005f50 <_fwalk_sglue+0xc>
 8005f60:	4630      	mov	r0, r6
 8005f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f66:	89ab      	ldrh	r3, [r5, #12]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d907      	bls.n	8005f7c <_fwalk_sglue+0x38>
 8005f6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f70:	3301      	adds	r3, #1
 8005f72:	d003      	beq.n	8005f7c <_fwalk_sglue+0x38>
 8005f74:	4629      	mov	r1, r5
 8005f76:	4638      	mov	r0, r7
 8005f78:	47c0      	blx	r8
 8005f7a:	4306      	orrs	r6, r0
 8005f7c:	3568      	adds	r5, #104	; 0x68
 8005f7e:	e7e9      	b.n	8005f54 <_fwalk_sglue+0x10>

08005f80 <_puts_r>:
 8005f80:	6a03      	ldr	r3, [r0, #32]
 8005f82:	b570      	push	{r4, r5, r6, lr}
 8005f84:	6884      	ldr	r4, [r0, #8]
 8005f86:	4605      	mov	r5, r0
 8005f88:	460e      	mov	r6, r1
 8005f8a:	b90b      	cbnz	r3, 8005f90 <_puts_r+0x10>
 8005f8c:	f7ff ffc2 	bl	8005f14 <__sinit>
 8005f90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f92:	07db      	lsls	r3, r3, #31
 8005f94:	d405      	bmi.n	8005fa2 <_puts_r+0x22>
 8005f96:	89a3      	ldrh	r3, [r4, #12]
 8005f98:	0598      	lsls	r0, r3, #22
 8005f9a:	d402      	bmi.n	8005fa2 <_puts_r+0x22>
 8005f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f9e:	f000 f87e 	bl	800609e <__retarget_lock_acquire_recursive>
 8005fa2:	89a3      	ldrh	r3, [r4, #12]
 8005fa4:	0719      	lsls	r1, r3, #28
 8005fa6:	d513      	bpl.n	8005fd0 <_puts_r+0x50>
 8005fa8:	6923      	ldr	r3, [r4, #16]
 8005faa:	b18b      	cbz	r3, 8005fd0 <_puts_r+0x50>
 8005fac:	3e01      	subs	r6, #1
 8005fae:	68a3      	ldr	r3, [r4, #8]
 8005fb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	60a3      	str	r3, [r4, #8]
 8005fb8:	b9e9      	cbnz	r1, 8005ff6 <_puts_r+0x76>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	da2e      	bge.n	800601c <_puts_r+0x9c>
 8005fbe:	4622      	mov	r2, r4
 8005fc0:	210a      	movs	r1, #10
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f000 fa0b 	bl	80063de <__swbuf_r>
 8005fc8:	3001      	adds	r0, #1
 8005fca:	d007      	beq.n	8005fdc <_puts_r+0x5c>
 8005fcc:	250a      	movs	r5, #10
 8005fce:	e007      	b.n	8005fe0 <_puts_r+0x60>
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f000 fa40 	bl	8006458 <__swsetup_r>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d0e7      	beq.n	8005fac <_puts_r+0x2c>
 8005fdc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005fe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fe2:	07da      	lsls	r2, r3, #31
 8005fe4:	d405      	bmi.n	8005ff2 <_puts_r+0x72>
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	059b      	lsls	r3, r3, #22
 8005fea:	d402      	bmi.n	8005ff2 <_puts_r+0x72>
 8005fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fee:	f000 f857 	bl	80060a0 <__retarget_lock_release_recursive>
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	bd70      	pop	{r4, r5, r6, pc}
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	da04      	bge.n	8006004 <_puts_r+0x84>
 8005ffa:	69a2      	ldr	r2, [r4, #24]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	dc06      	bgt.n	800600e <_puts_r+0x8e>
 8006000:	290a      	cmp	r1, #10
 8006002:	d004      	beq.n	800600e <_puts_r+0x8e>
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	6022      	str	r2, [r4, #0]
 800600a:	7019      	strb	r1, [r3, #0]
 800600c:	e7cf      	b.n	8005fae <_puts_r+0x2e>
 800600e:	4622      	mov	r2, r4
 8006010:	4628      	mov	r0, r5
 8006012:	f000 f9e4 	bl	80063de <__swbuf_r>
 8006016:	3001      	adds	r0, #1
 8006018:	d1c9      	bne.n	8005fae <_puts_r+0x2e>
 800601a:	e7df      	b.n	8005fdc <_puts_r+0x5c>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	250a      	movs	r5, #10
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	6022      	str	r2, [r4, #0]
 8006024:	701d      	strb	r5, [r3, #0]
 8006026:	e7db      	b.n	8005fe0 <_puts_r+0x60>

08006028 <puts>:
 8006028:	4b02      	ldr	r3, [pc, #8]	; (8006034 <puts+0xc>)
 800602a:	4601      	mov	r1, r0
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	f7ff bfa7 	b.w	8005f80 <_puts_r>
 8006032:	bf00      	nop
 8006034:	20000064 	.word	0x20000064

08006038 <memset>:
 8006038:	4402      	add	r2, r0
 800603a:	4603      	mov	r3, r0
 800603c:	4293      	cmp	r3, r2
 800603e:	d100      	bne.n	8006042 <memset+0xa>
 8006040:	4770      	bx	lr
 8006042:	f803 1b01 	strb.w	r1, [r3], #1
 8006046:	e7f9      	b.n	800603c <memset+0x4>

08006048 <__errno>:
 8006048:	4b01      	ldr	r3, [pc, #4]	; (8006050 <__errno+0x8>)
 800604a:	6818      	ldr	r0, [r3, #0]
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	20000064 	.word	0x20000064

08006054 <__libc_init_array>:
 8006054:	b570      	push	{r4, r5, r6, lr}
 8006056:	4d0d      	ldr	r5, [pc, #52]	; (800608c <__libc_init_array+0x38>)
 8006058:	4c0d      	ldr	r4, [pc, #52]	; (8006090 <__libc_init_array+0x3c>)
 800605a:	1b64      	subs	r4, r4, r5
 800605c:	10a4      	asrs	r4, r4, #2
 800605e:	2600      	movs	r6, #0
 8006060:	42a6      	cmp	r6, r4
 8006062:	d109      	bne.n	8006078 <__libc_init_array+0x24>
 8006064:	4d0b      	ldr	r5, [pc, #44]	; (8006094 <__libc_init_array+0x40>)
 8006066:	4c0c      	ldr	r4, [pc, #48]	; (8006098 <__libc_init_array+0x44>)
 8006068:	f000 fb74 	bl	8006754 <_init>
 800606c:	1b64      	subs	r4, r4, r5
 800606e:	10a4      	asrs	r4, r4, #2
 8006070:	2600      	movs	r6, #0
 8006072:	42a6      	cmp	r6, r4
 8006074:	d105      	bne.n	8006082 <__libc_init_array+0x2e>
 8006076:	bd70      	pop	{r4, r5, r6, pc}
 8006078:	f855 3b04 	ldr.w	r3, [r5], #4
 800607c:	4798      	blx	r3
 800607e:	3601      	adds	r6, #1
 8006080:	e7ee      	b.n	8006060 <__libc_init_array+0xc>
 8006082:	f855 3b04 	ldr.w	r3, [r5], #4
 8006086:	4798      	blx	r3
 8006088:	3601      	adds	r6, #1
 800608a:	e7f2      	b.n	8006072 <__libc_init_array+0x1e>
 800608c:	080067f4 	.word	0x080067f4
 8006090:	080067f4 	.word	0x080067f4
 8006094:	080067f4 	.word	0x080067f4
 8006098:	080067f8 	.word	0x080067f8

0800609c <__retarget_lock_init_recursive>:
 800609c:	4770      	bx	lr

0800609e <__retarget_lock_acquire_recursive>:
 800609e:	4770      	bx	lr

080060a0 <__retarget_lock_release_recursive>:
 80060a0:	4770      	bx	lr
	...

080060a4 <sbrk_aligned>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	4e0e      	ldr	r6, [pc, #56]	; (80060e0 <sbrk_aligned+0x3c>)
 80060a8:	460c      	mov	r4, r1
 80060aa:	6831      	ldr	r1, [r6, #0]
 80060ac:	4605      	mov	r5, r0
 80060ae:	b911      	cbnz	r1, 80060b6 <sbrk_aligned+0x12>
 80060b0:	f000 fae2 	bl	8006678 <_sbrk_r>
 80060b4:	6030      	str	r0, [r6, #0]
 80060b6:	4621      	mov	r1, r4
 80060b8:	4628      	mov	r0, r5
 80060ba:	f000 fadd 	bl	8006678 <_sbrk_r>
 80060be:	1c43      	adds	r3, r0, #1
 80060c0:	d00a      	beq.n	80060d8 <sbrk_aligned+0x34>
 80060c2:	1cc4      	adds	r4, r0, #3
 80060c4:	f024 0403 	bic.w	r4, r4, #3
 80060c8:	42a0      	cmp	r0, r4
 80060ca:	d007      	beq.n	80060dc <sbrk_aligned+0x38>
 80060cc:	1a21      	subs	r1, r4, r0
 80060ce:	4628      	mov	r0, r5
 80060d0:	f000 fad2 	bl	8006678 <_sbrk_r>
 80060d4:	3001      	adds	r0, #1
 80060d6:	d101      	bne.n	80060dc <sbrk_aligned+0x38>
 80060d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80060dc:	4620      	mov	r0, r4
 80060de:	bd70      	pop	{r4, r5, r6, pc}
 80060e0:	200003c0 	.word	0x200003c0

080060e4 <_malloc_r>:
 80060e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060e8:	1ccd      	adds	r5, r1, #3
 80060ea:	f025 0503 	bic.w	r5, r5, #3
 80060ee:	3508      	adds	r5, #8
 80060f0:	2d0c      	cmp	r5, #12
 80060f2:	bf38      	it	cc
 80060f4:	250c      	movcc	r5, #12
 80060f6:	2d00      	cmp	r5, #0
 80060f8:	4607      	mov	r7, r0
 80060fa:	db01      	blt.n	8006100 <_malloc_r+0x1c>
 80060fc:	42a9      	cmp	r1, r5
 80060fe:	d905      	bls.n	800610c <_malloc_r+0x28>
 8006100:	230c      	movs	r3, #12
 8006102:	603b      	str	r3, [r7, #0]
 8006104:	2600      	movs	r6, #0
 8006106:	4630      	mov	r0, r6
 8006108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800610c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80061e0 <_malloc_r+0xfc>
 8006110:	f000 f916 	bl	8006340 <__malloc_lock>
 8006114:	f8d8 3000 	ldr.w	r3, [r8]
 8006118:	461c      	mov	r4, r3
 800611a:	bb5c      	cbnz	r4, 8006174 <_malloc_r+0x90>
 800611c:	4629      	mov	r1, r5
 800611e:	4638      	mov	r0, r7
 8006120:	f7ff ffc0 	bl	80060a4 <sbrk_aligned>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	4604      	mov	r4, r0
 8006128:	d155      	bne.n	80061d6 <_malloc_r+0xf2>
 800612a:	f8d8 4000 	ldr.w	r4, [r8]
 800612e:	4626      	mov	r6, r4
 8006130:	2e00      	cmp	r6, #0
 8006132:	d145      	bne.n	80061c0 <_malloc_r+0xdc>
 8006134:	2c00      	cmp	r4, #0
 8006136:	d048      	beq.n	80061ca <_malloc_r+0xe6>
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	4631      	mov	r1, r6
 800613c:	4638      	mov	r0, r7
 800613e:	eb04 0903 	add.w	r9, r4, r3
 8006142:	f000 fa99 	bl	8006678 <_sbrk_r>
 8006146:	4581      	cmp	r9, r0
 8006148:	d13f      	bne.n	80061ca <_malloc_r+0xe6>
 800614a:	6821      	ldr	r1, [r4, #0]
 800614c:	1a6d      	subs	r5, r5, r1
 800614e:	4629      	mov	r1, r5
 8006150:	4638      	mov	r0, r7
 8006152:	f7ff ffa7 	bl	80060a4 <sbrk_aligned>
 8006156:	3001      	adds	r0, #1
 8006158:	d037      	beq.n	80061ca <_malloc_r+0xe6>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	442b      	add	r3, r5
 800615e:	6023      	str	r3, [r4, #0]
 8006160:	f8d8 3000 	ldr.w	r3, [r8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d038      	beq.n	80061da <_malloc_r+0xf6>
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	42a2      	cmp	r2, r4
 800616c:	d12b      	bne.n	80061c6 <_malloc_r+0xe2>
 800616e:	2200      	movs	r2, #0
 8006170:	605a      	str	r2, [r3, #4]
 8006172:	e00f      	b.n	8006194 <_malloc_r+0xb0>
 8006174:	6822      	ldr	r2, [r4, #0]
 8006176:	1b52      	subs	r2, r2, r5
 8006178:	d41f      	bmi.n	80061ba <_malloc_r+0xd6>
 800617a:	2a0b      	cmp	r2, #11
 800617c:	d917      	bls.n	80061ae <_malloc_r+0xca>
 800617e:	1961      	adds	r1, r4, r5
 8006180:	42a3      	cmp	r3, r4
 8006182:	6025      	str	r5, [r4, #0]
 8006184:	bf18      	it	ne
 8006186:	6059      	strne	r1, [r3, #4]
 8006188:	6863      	ldr	r3, [r4, #4]
 800618a:	bf08      	it	eq
 800618c:	f8c8 1000 	streq.w	r1, [r8]
 8006190:	5162      	str	r2, [r4, r5]
 8006192:	604b      	str	r3, [r1, #4]
 8006194:	4638      	mov	r0, r7
 8006196:	f104 060b 	add.w	r6, r4, #11
 800619a:	f000 f8d7 	bl	800634c <__malloc_unlock>
 800619e:	f026 0607 	bic.w	r6, r6, #7
 80061a2:	1d23      	adds	r3, r4, #4
 80061a4:	1af2      	subs	r2, r6, r3
 80061a6:	d0ae      	beq.n	8006106 <_malloc_r+0x22>
 80061a8:	1b9b      	subs	r3, r3, r6
 80061aa:	50a3      	str	r3, [r4, r2]
 80061ac:	e7ab      	b.n	8006106 <_malloc_r+0x22>
 80061ae:	42a3      	cmp	r3, r4
 80061b0:	6862      	ldr	r2, [r4, #4]
 80061b2:	d1dd      	bne.n	8006170 <_malloc_r+0x8c>
 80061b4:	f8c8 2000 	str.w	r2, [r8]
 80061b8:	e7ec      	b.n	8006194 <_malloc_r+0xb0>
 80061ba:	4623      	mov	r3, r4
 80061bc:	6864      	ldr	r4, [r4, #4]
 80061be:	e7ac      	b.n	800611a <_malloc_r+0x36>
 80061c0:	4634      	mov	r4, r6
 80061c2:	6876      	ldr	r6, [r6, #4]
 80061c4:	e7b4      	b.n	8006130 <_malloc_r+0x4c>
 80061c6:	4613      	mov	r3, r2
 80061c8:	e7cc      	b.n	8006164 <_malloc_r+0x80>
 80061ca:	230c      	movs	r3, #12
 80061cc:	603b      	str	r3, [r7, #0]
 80061ce:	4638      	mov	r0, r7
 80061d0:	f000 f8bc 	bl	800634c <__malloc_unlock>
 80061d4:	e797      	b.n	8006106 <_malloc_r+0x22>
 80061d6:	6025      	str	r5, [r4, #0]
 80061d8:	e7dc      	b.n	8006194 <_malloc_r+0xb0>
 80061da:	605b      	str	r3, [r3, #4]
 80061dc:	deff      	udf	#255	; 0xff
 80061de:	bf00      	nop
 80061e0:	200003bc 	.word	0x200003bc

080061e4 <__sflush_r>:
 80061e4:	898a      	ldrh	r2, [r1, #12]
 80061e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ea:	4605      	mov	r5, r0
 80061ec:	0710      	lsls	r0, r2, #28
 80061ee:	460c      	mov	r4, r1
 80061f0:	d458      	bmi.n	80062a4 <__sflush_r+0xc0>
 80061f2:	684b      	ldr	r3, [r1, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	dc05      	bgt.n	8006204 <__sflush_r+0x20>
 80061f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	dc02      	bgt.n	8006204 <__sflush_r+0x20>
 80061fe:	2000      	movs	r0, #0
 8006200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006206:	2e00      	cmp	r6, #0
 8006208:	d0f9      	beq.n	80061fe <__sflush_r+0x1a>
 800620a:	2300      	movs	r3, #0
 800620c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006210:	682f      	ldr	r7, [r5, #0]
 8006212:	6a21      	ldr	r1, [r4, #32]
 8006214:	602b      	str	r3, [r5, #0]
 8006216:	d032      	beq.n	800627e <__sflush_r+0x9a>
 8006218:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	075a      	lsls	r2, r3, #29
 800621e:	d505      	bpl.n	800622c <__sflush_r+0x48>
 8006220:	6863      	ldr	r3, [r4, #4]
 8006222:	1ac0      	subs	r0, r0, r3
 8006224:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006226:	b10b      	cbz	r3, 800622c <__sflush_r+0x48>
 8006228:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800622a:	1ac0      	subs	r0, r0, r3
 800622c:	2300      	movs	r3, #0
 800622e:	4602      	mov	r2, r0
 8006230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006232:	6a21      	ldr	r1, [r4, #32]
 8006234:	4628      	mov	r0, r5
 8006236:	47b0      	blx	r6
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	d106      	bne.n	800624c <__sflush_r+0x68>
 800623e:	6829      	ldr	r1, [r5, #0]
 8006240:	291d      	cmp	r1, #29
 8006242:	d82b      	bhi.n	800629c <__sflush_r+0xb8>
 8006244:	4a29      	ldr	r2, [pc, #164]	; (80062ec <__sflush_r+0x108>)
 8006246:	410a      	asrs	r2, r1
 8006248:	07d6      	lsls	r6, r2, #31
 800624a:	d427      	bmi.n	800629c <__sflush_r+0xb8>
 800624c:	2200      	movs	r2, #0
 800624e:	6062      	str	r2, [r4, #4]
 8006250:	04d9      	lsls	r1, r3, #19
 8006252:	6922      	ldr	r2, [r4, #16]
 8006254:	6022      	str	r2, [r4, #0]
 8006256:	d504      	bpl.n	8006262 <__sflush_r+0x7e>
 8006258:	1c42      	adds	r2, r0, #1
 800625a:	d101      	bne.n	8006260 <__sflush_r+0x7c>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	b903      	cbnz	r3, 8006262 <__sflush_r+0x7e>
 8006260:	6560      	str	r0, [r4, #84]	; 0x54
 8006262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006264:	602f      	str	r7, [r5, #0]
 8006266:	2900      	cmp	r1, #0
 8006268:	d0c9      	beq.n	80061fe <__sflush_r+0x1a>
 800626a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800626e:	4299      	cmp	r1, r3
 8006270:	d002      	beq.n	8006278 <__sflush_r+0x94>
 8006272:	4628      	mov	r0, r5
 8006274:	f000 fa22 	bl	80066bc <_free_r>
 8006278:	2000      	movs	r0, #0
 800627a:	6360      	str	r0, [r4, #52]	; 0x34
 800627c:	e7c0      	b.n	8006200 <__sflush_r+0x1c>
 800627e:	2301      	movs	r3, #1
 8006280:	4628      	mov	r0, r5
 8006282:	47b0      	blx	r6
 8006284:	1c41      	adds	r1, r0, #1
 8006286:	d1c8      	bne.n	800621a <__sflush_r+0x36>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0c5      	beq.n	800621a <__sflush_r+0x36>
 800628e:	2b1d      	cmp	r3, #29
 8006290:	d001      	beq.n	8006296 <__sflush_r+0xb2>
 8006292:	2b16      	cmp	r3, #22
 8006294:	d101      	bne.n	800629a <__sflush_r+0xb6>
 8006296:	602f      	str	r7, [r5, #0]
 8006298:	e7b1      	b.n	80061fe <__sflush_r+0x1a>
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062a0:	81a3      	strh	r3, [r4, #12]
 80062a2:	e7ad      	b.n	8006200 <__sflush_r+0x1c>
 80062a4:	690f      	ldr	r7, [r1, #16]
 80062a6:	2f00      	cmp	r7, #0
 80062a8:	d0a9      	beq.n	80061fe <__sflush_r+0x1a>
 80062aa:	0793      	lsls	r3, r2, #30
 80062ac:	680e      	ldr	r6, [r1, #0]
 80062ae:	bf08      	it	eq
 80062b0:	694b      	ldreq	r3, [r1, #20]
 80062b2:	600f      	str	r7, [r1, #0]
 80062b4:	bf18      	it	ne
 80062b6:	2300      	movne	r3, #0
 80062b8:	eba6 0807 	sub.w	r8, r6, r7
 80062bc:	608b      	str	r3, [r1, #8]
 80062be:	f1b8 0f00 	cmp.w	r8, #0
 80062c2:	dd9c      	ble.n	80061fe <__sflush_r+0x1a>
 80062c4:	6a21      	ldr	r1, [r4, #32]
 80062c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062c8:	4643      	mov	r3, r8
 80062ca:	463a      	mov	r2, r7
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b0      	blx	r6
 80062d0:	2800      	cmp	r0, #0
 80062d2:	dc06      	bgt.n	80062e2 <__sflush_r+0xfe>
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062da:	81a3      	strh	r3, [r4, #12]
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062e0:	e78e      	b.n	8006200 <__sflush_r+0x1c>
 80062e2:	4407      	add	r7, r0
 80062e4:	eba8 0800 	sub.w	r8, r8, r0
 80062e8:	e7e9      	b.n	80062be <__sflush_r+0xda>
 80062ea:	bf00      	nop
 80062ec:	dfbffffe 	.word	0xdfbffffe

080062f0 <_fflush_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	690b      	ldr	r3, [r1, #16]
 80062f4:	4605      	mov	r5, r0
 80062f6:	460c      	mov	r4, r1
 80062f8:	b913      	cbnz	r3, 8006300 <_fflush_r+0x10>
 80062fa:	2500      	movs	r5, #0
 80062fc:	4628      	mov	r0, r5
 80062fe:	bd38      	pop	{r3, r4, r5, pc}
 8006300:	b118      	cbz	r0, 800630a <_fflush_r+0x1a>
 8006302:	6a03      	ldr	r3, [r0, #32]
 8006304:	b90b      	cbnz	r3, 800630a <_fflush_r+0x1a>
 8006306:	f7ff fe05 	bl	8005f14 <__sinit>
 800630a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0f3      	beq.n	80062fa <_fflush_r+0xa>
 8006312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006314:	07d0      	lsls	r0, r2, #31
 8006316:	d404      	bmi.n	8006322 <_fflush_r+0x32>
 8006318:	0599      	lsls	r1, r3, #22
 800631a:	d402      	bmi.n	8006322 <_fflush_r+0x32>
 800631c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800631e:	f7ff febe 	bl	800609e <__retarget_lock_acquire_recursive>
 8006322:	4628      	mov	r0, r5
 8006324:	4621      	mov	r1, r4
 8006326:	f7ff ff5d 	bl	80061e4 <__sflush_r>
 800632a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800632c:	07da      	lsls	r2, r3, #31
 800632e:	4605      	mov	r5, r0
 8006330:	d4e4      	bmi.n	80062fc <_fflush_r+0xc>
 8006332:	89a3      	ldrh	r3, [r4, #12]
 8006334:	059b      	lsls	r3, r3, #22
 8006336:	d4e1      	bmi.n	80062fc <_fflush_r+0xc>
 8006338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800633a:	f7ff feb1 	bl	80060a0 <__retarget_lock_release_recursive>
 800633e:	e7dd      	b.n	80062fc <_fflush_r+0xc>

08006340 <__malloc_lock>:
 8006340:	4801      	ldr	r0, [pc, #4]	; (8006348 <__malloc_lock+0x8>)
 8006342:	f7ff beac 	b.w	800609e <__retarget_lock_acquire_recursive>
 8006346:	bf00      	nop
 8006348:	200003b8 	.word	0x200003b8

0800634c <__malloc_unlock>:
 800634c:	4801      	ldr	r0, [pc, #4]	; (8006354 <__malloc_unlock+0x8>)
 800634e:	f7ff bea7 	b.w	80060a0 <__retarget_lock_release_recursive>
 8006352:	bf00      	nop
 8006354:	200003b8 	.word	0x200003b8

08006358 <__sread>:
 8006358:	b510      	push	{r4, lr}
 800635a:	460c      	mov	r4, r1
 800635c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006360:	f000 f978 	bl	8006654 <_read_r>
 8006364:	2800      	cmp	r0, #0
 8006366:	bfab      	itete	ge
 8006368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800636a:	89a3      	ldrhlt	r3, [r4, #12]
 800636c:	181b      	addge	r3, r3, r0
 800636e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006372:	bfac      	ite	ge
 8006374:	6563      	strge	r3, [r4, #84]	; 0x54
 8006376:	81a3      	strhlt	r3, [r4, #12]
 8006378:	bd10      	pop	{r4, pc}

0800637a <__swrite>:
 800637a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800637e:	461f      	mov	r7, r3
 8006380:	898b      	ldrh	r3, [r1, #12]
 8006382:	05db      	lsls	r3, r3, #23
 8006384:	4605      	mov	r5, r0
 8006386:	460c      	mov	r4, r1
 8006388:	4616      	mov	r6, r2
 800638a:	d505      	bpl.n	8006398 <__swrite+0x1e>
 800638c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006390:	2302      	movs	r3, #2
 8006392:	2200      	movs	r2, #0
 8006394:	f000 f94c 	bl	8006630 <_lseek_r>
 8006398:	89a3      	ldrh	r3, [r4, #12]
 800639a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800639e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063a2:	81a3      	strh	r3, [r4, #12]
 80063a4:	4632      	mov	r2, r6
 80063a6:	463b      	mov	r3, r7
 80063a8:	4628      	mov	r0, r5
 80063aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ae:	f000 b973 	b.w	8006698 <_write_r>

080063b2 <__sseek>:
 80063b2:	b510      	push	{r4, lr}
 80063b4:	460c      	mov	r4, r1
 80063b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ba:	f000 f939 	bl	8006630 <_lseek_r>
 80063be:	1c43      	adds	r3, r0, #1
 80063c0:	89a3      	ldrh	r3, [r4, #12]
 80063c2:	bf15      	itete	ne
 80063c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80063c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063ce:	81a3      	strheq	r3, [r4, #12]
 80063d0:	bf18      	it	ne
 80063d2:	81a3      	strhne	r3, [r4, #12]
 80063d4:	bd10      	pop	{r4, pc}

080063d6 <__sclose>:
 80063d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063da:	f000 b8f7 	b.w	80065cc <_close_r>

080063de <__swbuf_r>:
 80063de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e0:	460e      	mov	r6, r1
 80063e2:	4614      	mov	r4, r2
 80063e4:	4605      	mov	r5, r0
 80063e6:	b118      	cbz	r0, 80063f0 <__swbuf_r+0x12>
 80063e8:	6a03      	ldr	r3, [r0, #32]
 80063ea:	b90b      	cbnz	r3, 80063f0 <__swbuf_r+0x12>
 80063ec:	f7ff fd92 	bl	8005f14 <__sinit>
 80063f0:	69a3      	ldr	r3, [r4, #24]
 80063f2:	60a3      	str	r3, [r4, #8]
 80063f4:	89a3      	ldrh	r3, [r4, #12]
 80063f6:	071a      	lsls	r2, r3, #28
 80063f8:	d525      	bpl.n	8006446 <__swbuf_r+0x68>
 80063fa:	6923      	ldr	r3, [r4, #16]
 80063fc:	b31b      	cbz	r3, 8006446 <__swbuf_r+0x68>
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	6922      	ldr	r2, [r4, #16]
 8006402:	1a98      	subs	r0, r3, r2
 8006404:	6963      	ldr	r3, [r4, #20]
 8006406:	b2f6      	uxtb	r6, r6
 8006408:	4283      	cmp	r3, r0
 800640a:	4637      	mov	r7, r6
 800640c:	dc04      	bgt.n	8006418 <__swbuf_r+0x3a>
 800640e:	4621      	mov	r1, r4
 8006410:	4628      	mov	r0, r5
 8006412:	f7ff ff6d 	bl	80062f0 <_fflush_r>
 8006416:	b9e0      	cbnz	r0, 8006452 <__swbuf_r+0x74>
 8006418:	68a3      	ldr	r3, [r4, #8]
 800641a:	3b01      	subs	r3, #1
 800641c:	60a3      	str	r3, [r4, #8]
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	6022      	str	r2, [r4, #0]
 8006424:	701e      	strb	r6, [r3, #0]
 8006426:	6962      	ldr	r2, [r4, #20]
 8006428:	1c43      	adds	r3, r0, #1
 800642a:	429a      	cmp	r2, r3
 800642c:	d004      	beq.n	8006438 <__swbuf_r+0x5a>
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	07db      	lsls	r3, r3, #31
 8006432:	d506      	bpl.n	8006442 <__swbuf_r+0x64>
 8006434:	2e0a      	cmp	r6, #10
 8006436:	d104      	bne.n	8006442 <__swbuf_r+0x64>
 8006438:	4621      	mov	r1, r4
 800643a:	4628      	mov	r0, r5
 800643c:	f7ff ff58 	bl	80062f0 <_fflush_r>
 8006440:	b938      	cbnz	r0, 8006452 <__swbuf_r+0x74>
 8006442:	4638      	mov	r0, r7
 8006444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006446:	4621      	mov	r1, r4
 8006448:	4628      	mov	r0, r5
 800644a:	f000 f805 	bl	8006458 <__swsetup_r>
 800644e:	2800      	cmp	r0, #0
 8006450:	d0d5      	beq.n	80063fe <__swbuf_r+0x20>
 8006452:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006456:	e7f4      	b.n	8006442 <__swbuf_r+0x64>

08006458 <__swsetup_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4b2a      	ldr	r3, [pc, #168]	; (8006504 <__swsetup_r+0xac>)
 800645c:	4605      	mov	r5, r0
 800645e:	6818      	ldr	r0, [r3, #0]
 8006460:	460c      	mov	r4, r1
 8006462:	b118      	cbz	r0, 800646c <__swsetup_r+0x14>
 8006464:	6a03      	ldr	r3, [r0, #32]
 8006466:	b90b      	cbnz	r3, 800646c <__swsetup_r+0x14>
 8006468:	f7ff fd54 	bl	8005f14 <__sinit>
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006472:	0718      	lsls	r0, r3, #28
 8006474:	d422      	bmi.n	80064bc <__swsetup_r+0x64>
 8006476:	06d9      	lsls	r1, r3, #27
 8006478:	d407      	bmi.n	800648a <__swsetup_r+0x32>
 800647a:	2309      	movs	r3, #9
 800647c:	602b      	str	r3, [r5, #0]
 800647e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006482:	81a3      	strh	r3, [r4, #12]
 8006484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006488:	e034      	b.n	80064f4 <__swsetup_r+0x9c>
 800648a:	0758      	lsls	r0, r3, #29
 800648c:	d512      	bpl.n	80064b4 <__swsetup_r+0x5c>
 800648e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006490:	b141      	cbz	r1, 80064a4 <__swsetup_r+0x4c>
 8006492:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006496:	4299      	cmp	r1, r3
 8006498:	d002      	beq.n	80064a0 <__swsetup_r+0x48>
 800649a:	4628      	mov	r0, r5
 800649c:	f000 f90e 	bl	80066bc <_free_r>
 80064a0:	2300      	movs	r3, #0
 80064a2:	6363      	str	r3, [r4, #52]	; 0x34
 80064a4:	89a3      	ldrh	r3, [r4, #12]
 80064a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064aa:	81a3      	strh	r3, [r4, #12]
 80064ac:	2300      	movs	r3, #0
 80064ae:	6063      	str	r3, [r4, #4]
 80064b0:	6923      	ldr	r3, [r4, #16]
 80064b2:	6023      	str	r3, [r4, #0]
 80064b4:	89a3      	ldrh	r3, [r4, #12]
 80064b6:	f043 0308 	orr.w	r3, r3, #8
 80064ba:	81a3      	strh	r3, [r4, #12]
 80064bc:	6923      	ldr	r3, [r4, #16]
 80064be:	b94b      	cbnz	r3, 80064d4 <__swsetup_r+0x7c>
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ca:	d003      	beq.n	80064d4 <__swsetup_r+0x7c>
 80064cc:	4621      	mov	r1, r4
 80064ce:	4628      	mov	r0, r5
 80064d0:	f000 f840 	bl	8006554 <__smakebuf_r>
 80064d4:	89a0      	ldrh	r0, [r4, #12]
 80064d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064da:	f010 0301 	ands.w	r3, r0, #1
 80064de:	d00a      	beq.n	80064f6 <__swsetup_r+0x9e>
 80064e0:	2300      	movs	r3, #0
 80064e2:	60a3      	str	r3, [r4, #8]
 80064e4:	6963      	ldr	r3, [r4, #20]
 80064e6:	425b      	negs	r3, r3
 80064e8:	61a3      	str	r3, [r4, #24]
 80064ea:	6923      	ldr	r3, [r4, #16]
 80064ec:	b943      	cbnz	r3, 8006500 <__swsetup_r+0xa8>
 80064ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064f2:	d1c4      	bne.n	800647e <__swsetup_r+0x26>
 80064f4:	bd38      	pop	{r3, r4, r5, pc}
 80064f6:	0781      	lsls	r1, r0, #30
 80064f8:	bf58      	it	pl
 80064fa:	6963      	ldrpl	r3, [r4, #20]
 80064fc:	60a3      	str	r3, [r4, #8]
 80064fe:	e7f4      	b.n	80064ea <__swsetup_r+0x92>
 8006500:	2000      	movs	r0, #0
 8006502:	e7f7      	b.n	80064f4 <__swsetup_r+0x9c>
 8006504:	20000064 	.word	0x20000064

08006508 <__swhatbuf_r>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	460c      	mov	r4, r1
 800650c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006510:	2900      	cmp	r1, #0
 8006512:	b096      	sub	sp, #88	; 0x58
 8006514:	4615      	mov	r5, r2
 8006516:	461e      	mov	r6, r3
 8006518:	da0d      	bge.n	8006536 <__swhatbuf_r+0x2e>
 800651a:	89a3      	ldrh	r3, [r4, #12]
 800651c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006520:	f04f 0100 	mov.w	r1, #0
 8006524:	bf0c      	ite	eq
 8006526:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800652a:	2340      	movne	r3, #64	; 0x40
 800652c:	2000      	movs	r0, #0
 800652e:	6031      	str	r1, [r6, #0]
 8006530:	602b      	str	r3, [r5, #0]
 8006532:	b016      	add	sp, #88	; 0x58
 8006534:	bd70      	pop	{r4, r5, r6, pc}
 8006536:	466a      	mov	r2, sp
 8006538:	f000 f858 	bl	80065ec <_fstat_r>
 800653c:	2800      	cmp	r0, #0
 800653e:	dbec      	blt.n	800651a <__swhatbuf_r+0x12>
 8006540:	9901      	ldr	r1, [sp, #4]
 8006542:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006546:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800654a:	4259      	negs	r1, r3
 800654c:	4159      	adcs	r1, r3
 800654e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006552:	e7eb      	b.n	800652c <__swhatbuf_r+0x24>

08006554 <__smakebuf_r>:
 8006554:	898b      	ldrh	r3, [r1, #12]
 8006556:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006558:	079d      	lsls	r5, r3, #30
 800655a:	4606      	mov	r6, r0
 800655c:	460c      	mov	r4, r1
 800655e:	d507      	bpl.n	8006570 <__smakebuf_r+0x1c>
 8006560:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	6123      	str	r3, [r4, #16]
 8006568:	2301      	movs	r3, #1
 800656a:	6163      	str	r3, [r4, #20]
 800656c:	b002      	add	sp, #8
 800656e:	bd70      	pop	{r4, r5, r6, pc}
 8006570:	ab01      	add	r3, sp, #4
 8006572:	466a      	mov	r2, sp
 8006574:	f7ff ffc8 	bl	8006508 <__swhatbuf_r>
 8006578:	9900      	ldr	r1, [sp, #0]
 800657a:	4605      	mov	r5, r0
 800657c:	4630      	mov	r0, r6
 800657e:	f7ff fdb1 	bl	80060e4 <_malloc_r>
 8006582:	b948      	cbnz	r0, 8006598 <__smakebuf_r+0x44>
 8006584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006588:	059a      	lsls	r2, r3, #22
 800658a:	d4ef      	bmi.n	800656c <__smakebuf_r+0x18>
 800658c:	f023 0303 	bic.w	r3, r3, #3
 8006590:	f043 0302 	orr.w	r3, r3, #2
 8006594:	81a3      	strh	r3, [r4, #12]
 8006596:	e7e3      	b.n	8006560 <__smakebuf_r+0xc>
 8006598:	89a3      	ldrh	r3, [r4, #12]
 800659a:	6020      	str	r0, [r4, #0]
 800659c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a0:	81a3      	strh	r3, [r4, #12]
 80065a2:	9b00      	ldr	r3, [sp, #0]
 80065a4:	6163      	str	r3, [r4, #20]
 80065a6:	9b01      	ldr	r3, [sp, #4]
 80065a8:	6120      	str	r0, [r4, #16]
 80065aa:	b15b      	cbz	r3, 80065c4 <__smakebuf_r+0x70>
 80065ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065b0:	4630      	mov	r0, r6
 80065b2:	f000 f82d 	bl	8006610 <_isatty_r>
 80065b6:	b128      	cbz	r0, 80065c4 <__smakebuf_r+0x70>
 80065b8:	89a3      	ldrh	r3, [r4, #12]
 80065ba:	f023 0303 	bic.w	r3, r3, #3
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	81a3      	strh	r3, [r4, #12]
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	431d      	orrs	r5, r3
 80065c8:	81a5      	strh	r5, [r4, #12]
 80065ca:	e7cf      	b.n	800656c <__smakebuf_r+0x18>

080065cc <_close_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d06      	ldr	r5, [pc, #24]	; (80065e8 <_close_r+0x1c>)
 80065d0:	2300      	movs	r3, #0
 80065d2:	4604      	mov	r4, r0
 80065d4:	4608      	mov	r0, r1
 80065d6:	602b      	str	r3, [r5, #0]
 80065d8:	f7fa fa51 	bl	8000a7e <_close>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d102      	bne.n	80065e6 <_close_r+0x1a>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	b103      	cbz	r3, 80065e6 <_close_r+0x1a>
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	bd38      	pop	{r3, r4, r5, pc}
 80065e8:	200003c4 	.word	0x200003c4

080065ec <_fstat_r>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	4d07      	ldr	r5, [pc, #28]	; (800660c <_fstat_r+0x20>)
 80065f0:	2300      	movs	r3, #0
 80065f2:	4604      	mov	r4, r0
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	602b      	str	r3, [r5, #0]
 80065fa:	f7fa fa4c 	bl	8000a96 <_fstat>
 80065fe:	1c43      	adds	r3, r0, #1
 8006600:	d102      	bne.n	8006608 <_fstat_r+0x1c>
 8006602:	682b      	ldr	r3, [r5, #0]
 8006604:	b103      	cbz	r3, 8006608 <_fstat_r+0x1c>
 8006606:	6023      	str	r3, [r4, #0]
 8006608:	bd38      	pop	{r3, r4, r5, pc}
 800660a:	bf00      	nop
 800660c:	200003c4 	.word	0x200003c4

08006610 <_isatty_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4d06      	ldr	r5, [pc, #24]	; (800662c <_isatty_r+0x1c>)
 8006614:	2300      	movs	r3, #0
 8006616:	4604      	mov	r4, r0
 8006618:	4608      	mov	r0, r1
 800661a:	602b      	str	r3, [r5, #0]
 800661c:	f7fa fa4b 	bl	8000ab6 <_isatty>
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	d102      	bne.n	800662a <_isatty_r+0x1a>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	b103      	cbz	r3, 800662a <_isatty_r+0x1a>
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	bd38      	pop	{r3, r4, r5, pc}
 800662c:	200003c4 	.word	0x200003c4

08006630 <_lseek_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4d07      	ldr	r5, [pc, #28]	; (8006650 <_lseek_r+0x20>)
 8006634:	4604      	mov	r4, r0
 8006636:	4608      	mov	r0, r1
 8006638:	4611      	mov	r1, r2
 800663a:	2200      	movs	r2, #0
 800663c:	602a      	str	r2, [r5, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f7fa fa44 	bl	8000acc <_lseek>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_lseek_r+0x1e>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	b103      	cbz	r3, 800664e <_lseek_r+0x1e>
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	200003c4 	.word	0x200003c4

08006654 <_read_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4d07      	ldr	r5, [pc, #28]	; (8006674 <_read_r+0x20>)
 8006658:	4604      	mov	r4, r0
 800665a:	4608      	mov	r0, r1
 800665c:	4611      	mov	r1, r2
 800665e:	2200      	movs	r2, #0
 8006660:	602a      	str	r2, [r5, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	f7fa f9d2 	bl	8000a0c <_read>
 8006668:	1c43      	adds	r3, r0, #1
 800666a:	d102      	bne.n	8006672 <_read_r+0x1e>
 800666c:	682b      	ldr	r3, [r5, #0]
 800666e:	b103      	cbz	r3, 8006672 <_read_r+0x1e>
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	bd38      	pop	{r3, r4, r5, pc}
 8006674:	200003c4 	.word	0x200003c4

08006678 <_sbrk_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	4d06      	ldr	r5, [pc, #24]	; (8006694 <_sbrk_r+0x1c>)
 800667c:	2300      	movs	r3, #0
 800667e:	4604      	mov	r4, r0
 8006680:	4608      	mov	r0, r1
 8006682:	602b      	str	r3, [r5, #0]
 8006684:	f7fa fa30 	bl	8000ae8 <_sbrk>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d102      	bne.n	8006692 <_sbrk_r+0x1a>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	b103      	cbz	r3, 8006692 <_sbrk_r+0x1a>
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	200003c4 	.word	0x200003c4

08006698 <_write_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	4d07      	ldr	r5, [pc, #28]	; (80066b8 <_write_r+0x20>)
 800669c:	4604      	mov	r4, r0
 800669e:	4608      	mov	r0, r1
 80066a0:	4611      	mov	r1, r2
 80066a2:	2200      	movs	r2, #0
 80066a4:	602a      	str	r2, [r5, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	f7fa f9cd 	bl	8000a46 <_write>
 80066ac:	1c43      	adds	r3, r0, #1
 80066ae:	d102      	bne.n	80066b6 <_write_r+0x1e>
 80066b0:	682b      	ldr	r3, [r5, #0]
 80066b2:	b103      	cbz	r3, 80066b6 <_write_r+0x1e>
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	bd38      	pop	{r3, r4, r5, pc}
 80066b8:	200003c4 	.word	0x200003c4

080066bc <_free_r>:
 80066bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066be:	2900      	cmp	r1, #0
 80066c0:	d044      	beq.n	800674c <_free_r+0x90>
 80066c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066c6:	9001      	str	r0, [sp, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f1a1 0404 	sub.w	r4, r1, #4
 80066ce:	bfb8      	it	lt
 80066d0:	18e4      	addlt	r4, r4, r3
 80066d2:	f7ff fe35 	bl	8006340 <__malloc_lock>
 80066d6:	4a1e      	ldr	r2, [pc, #120]	; (8006750 <_free_r+0x94>)
 80066d8:	9801      	ldr	r0, [sp, #4]
 80066da:	6813      	ldr	r3, [r2, #0]
 80066dc:	b933      	cbnz	r3, 80066ec <_free_r+0x30>
 80066de:	6063      	str	r3, [r4, #4]
 80066e0:	6014      	str	r4, [r2, #0]
 80066e2:	b003      	add	sp, #12
 80066e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066e8:	f7ff be30 	b.w	800634c <__malloc_unlock>
 80066ec:	42a3      	cmp	r3, r4
 80066ee:	d908      	bls.n	8006702 <_free_r+0x46>
 80066f0:	6825      	ldr	r5, [r4, #0]
 80066f2:	1961      	adds	r1, r4, r5
 80066f4:	428b      	cmp	r3, r1
 80066f6:	bf01      	itttt	eq
 80066f8:	6819      	ldreq	r1, [r3, #0]
 80066fa:	685b      	ldreq	r3, [r3, #4]
 80066fc:	1949      	addeq	r1, r1, r5
 80066fe:	6021      	streq	r1, [r4, #0]
 8006700:	e7ed      	b.n	80066de <_free_r+0x22>
 8006702:	461a      	mov	r2, r3
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	b10b      	cbz	r3, 800670c <_free_r+0x50>
 8006708:	42a3      	cmp	r3, r4
 800670a:	d9fa      	bls.n	8006702 <_free_r+0x46>
 800670c:	6811      	ldr	r1, [r2, #0]
 800670e:	1855      	adds	r5, r2, r1
 8006710:	42a5      	cmp	r5, r4
 8006712:	d10b      	bne.n	800672c <_free_r+0x70>
 8006714:	6824      	ldr	r4, [r4, #0]
 8006716:	4421      	add	r1, r4
 8006718:	1854      	adds	r4, r2, r1
 800671a:	42a3      	cmp	r3, r4
 800671c:	6011      	str	r1, [r2, #0]
 800671e:	d1e0      	bne.n	80066e2 <_free_r+0x26>
 8006720:	681c      	ldr	r4, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	6053      	str	r3, [r2, #4]
 8006726:	440c      	add	r4, r1
 8006728:	6014      	str	r4, [r2, #0]
 800672a:	e7da      	b.n	80066e2 <_free_r+0x26>
 800672c:	d902      	bls.n	8006734 <_free_r+0x78>
 800672e:	230c      	movs	r3, #12
 8006730:	6003      	str	r3, [r0, #0]
 8006732:	e7d6      	b.n	80066e2 <_free_r+0x26>
 8006734:	6825      	ldr	r5, [r4, #0]
 8006736:	1961      	adds	r1, r4, r5
 8006738:	428b      	cmp	r3, r1
 800673a:	bf04      	itt	eq
 800673c:	6819      	ldreq	r1, [r3, #0]
 800673e:	685b      	ldreq	r3, [r3, #4]
 8006740:	6063      	str	r3, [r4, #4]
 8006742:	bf04      	itt	eq
 8006744:	1949      	addeq	r1, r1, r5
 8006746:	6021      	streq	r1, [r4, #0]
 8006748:	6054      	str	r4, [r2, #4]
 800674a:	e7ca      	b.n	80066e2 <_free_r+0x26>
 800674c:	b003      	add	sp, #12
 800674e:	bd30      	pop	{r4, r5, pc}
 8006750:	200003bc 	.word	0x200003bc

08006754 <_init>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	bf00      	nop
 8006758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675a:	bc08      	pop	{r3}
 800675c:	469e      	mov	lr, r3
 800675e:	4770      	bx	lr

08006760 <_fini>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	bf00      	nop
 8006764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006766:	bc08      	pop	{r3}
 8006768:	469e      	mov	lr, r3
 800676a:	4770      	bx	lr
